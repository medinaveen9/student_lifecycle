{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicationBPT/Application1.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     {subject :'Total Marks obtained in Intermediate/EquivalentExamination ', total:'', totalMax:'' },\n//     {subject: 'total  percentage'}\n//   ]);\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={'92.8'}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//       disabled\n//     />\n//   </TableCell>\n// </TableRow>\n//               </TableRow>\n\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// // export default Application1;\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' }\n//   ]);\n\n//   const [totalMarks, setTotalMarks] = useState({ obtained: '', max: '' });\n// const [totalPercentage, setTotalPercentage] = useState('');\n// const [groupMarks, setGroupMarks] = useState({ obtained: '', max: '' });\n// const [groupPercentage, setGroupPercentage] = useState('');\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {/* Render input fields for each subject */}\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n\n//             {/* Total Marks Row */}\n//            {/* Total Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Intermediate/Equivalent Examination</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.obtained}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.max}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Total Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={totalPercentage}\n//       onChange={(e) => setTotalPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Group</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.obtained}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.max}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage in Group</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={groupPercentage}\n//       onChange={(e) => setGroupPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n//2//\n\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [educationData, setEducationData] = useState([\n//     { className: 'Inter 2nd Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: 'Inter 1st Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '10th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '9th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '8th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '7th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '6th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' }\n//   ]);\n//   const [eapcetData, setEapcetData] = useState({\n//     registrationNumber: '',\n//     hallTicketNumber: '',\n//     rank: ''\n//   });\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...educationData];\n//     updated[index][field] = value;\n//     setEducationData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Educational Details</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Class</TableCell>\n//               <TableCell>Year of Study</TableCell>\n//               <TableCell>Name of School / College</TableCell>\n//               <TableCell>Place</TableCell>\n//               <TableCell>State</TableCell>\n//               <TableCell>District</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {educationData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.className || '-'}</TableCell>\n\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.yearOfStudy}\n//                     onChange={(e) => handleChange(index, 'yearOfStudy', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.schoolName}\n//                     onChange={(e) => handleChange(index, 'schoolName', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.place}\n//                     onChange={(e) => handleChange(index, 'place', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.state}\n//                     onChange={(e) => handleChange(index, 'state', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.district}\n//                     onChange={(e) => handleChange(index, 'district', e.target.value)}\n//                   />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, my: 3 }}>\n//   <TextField\n//     label=\"TG EAPCET Registration Number\"\n//     value={eapcetData.registrationNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, registrationNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Hall Ticket Number\"\n//     value={eapcetData.hallTicketNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, hallTicketNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Rank\"\n//     value={eapcetData.rank}\n//     onChange={(e) => setEapcetData({ ...eapcetData, rank: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n// </Box>\n\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n//                    3           \n\n// import React, { useState } from 'react';\n// import {\n//   Typography,\n//   TextField,\n//   Box\n// } from '@mui/material';\n\n// const AddressForm = () => {\n//   const [formData, setFormData] = useState({\n//     correspondence: {\n//       address: '',\n//       country: '',\n//       state: '',\n//       district: '',\n//       pinCode: '',\n//       mobile: '',\n//       email: ''\n//     },\n//     permanent: {\n//       address: '',\n//       country: '',\n//       state: '',\n//       district: '',\n//       pinCode: '',\n//       mobile: '',\n//       email: ''\n//     },\n//     otherInfo: ''\n//   });\n\n//   const handleChange = (section, field, value) => {\n//     setFormData((prev) => ({\n//       ...prev,\n//       [section]: {\n//         ...prev[section],\n//         [field]: value\n//       }\n//     }));\n//   };\n\n//   return (\n//     <Box sx={{ p: 8, border: '1px solid #ccc', borderRadius: 2 }}>\n//       {/* Correspondence Address */}\n//       <Typography variant=\"h6\" gutterBottom>Correspondence Address</Typography>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//         <TextField label=\"Address\" value={formData.correspondence.address} onChange={(e) => handleChange('correspondence', 'address', e.target.value)} size=\"small\" />\n//         <TextField label=\"Country\" value={formData.correspondence.country} onChange={(e) => handleChange('correspondence', 'country', e.target.value)} size=\"small\" />\n//         <TextField label=\"State\" value={formData.correspondence.state} onChange={(e) => handleChange('correspondence', 'state', e.target.value)} size=\"small\" />\n//         <TextField label=\"District\" value={formData.correspondence.district} onChange={(e) => handleChange('correspondence', 'district', e.target.value)} size=\"small\" />\n//         <TextField label=\"Pin Code\" value={formData.correspondence.pinCode} onChange={(e) => handleChange('correspondence', 'pinCode', e.target.value)} size=\"small\" />\n//         <TextField label=\"Mobile No.\" value={formData.correspondence.mobile} onChange={(e) => handleChange('correspondence', 'mobile', e.target.value)} size=\"small\" />\n//         <TextField label=\"Email ID\" value={formData.correspondence.email} onChange={(e) => handleChange('correspondence', 'email', e.target.value)} size=\"small\" />\n//       </Box>\n\n//       {/* Permanent Address */}\n//       <Typography variant=\"h6\" gutterBottom>Permanent Address</Typography>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//         <TextField label=\"Address\" value={formData.permanent.address} onChange={(e) => handleChange('permanent', 'address', e.target.value)} size=\"small\" />\n//         <TextField label=\"Country\" value={formData.permanent.country} onChange={(e) => handleChange('permanent', 'country', e.target.value)} size=\"small\" />\n//         <TextField label=\"State\" value={formData.permanent.state} onChange={(e) => handleChange('permanent', 'state', e.target.value)} size=\"small\" />\n//         <TextField label=\"District\" value={formData.permanent.district} onChange={(e) => handleChange('permanent', 'district', e.target.value)} size=\"small\" />\n//         <TextField label=\"Pin Code\" value={formData.permanent.pinCode} onChange={(e) => handleChange('permanent', 'pinCode', e.target.value)} size=\"small\" />\n//         <TextField label=\"Mobile No.\" value={formData.permanent.mobile} onChange={(e) => handleChange('permanent', 'mobile', e.target.value)} size=\"small\" />\n//         <TextField label=\"Email ID\" value={formData.permanent.email} onChange={(e) => handleChange('permanent', 'email', e.target.value)} size=\"small\" />\n//       </Box>\n\n//       {/* Other Info */}\n//       <Typography variant=\"h6\" gutterBottom>Other Details</Typography>\n//       <TextField\n//         label=\"Any Other Relevant Information\"\n//         multiline\n//         rows={3}\n//         value={formData.otherInfo}\n//         onChange={(e) => setFormData({ ...formData, otherInfo: e.target.value })}\n//         size=\"small\"\n//         sx={{ width: '100%' }}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default AddressForm;\n\n///////444\n\nimport React, { useState } from 'react';\nimport { Typography, TextField, Box, Table, TableBody, TableCell, TableHead, TableRow, Paper, TableContainer } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentAndDocsSection = () => {\n  _s();\n  const documents = ['CASTE CERTIFICATE', '10th Class Marks Memo', 'INTERMEDIATE MARKS MEMO', '6TH to 10TH Study and Conduct Certificate', 'INTER STUDY AND CONDUCT CERTIFICATE', 'TRANSFER OR MIGRATION CERTIFICATE of Intermediate', 'TELANGANA STATE EAPCET-2025 RANK CARD'];\n  const [paymentData, setPaymentData] = useState({\n    paymentType: 'Online Payment',\n    transactionId: '136189873101',\n    date: '2025-06-09',\n    bankName: '',\n    branchDetails: '',\n    amount: '2500',\n    remarks: 'Online Payment'\n  });\n  const [uploadedDocs, setUploadedDocs] = useState({});\n  const handleFileChange = (index, file) => {\n    setUploadedDocs(prev => ({\n      ...prev,\n      [index]: file\n    }));\n  };\n  const handlePaymentChange = (field, value) => {\n    setPaymentData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 9,\n      border: '1px solid #ccc',\n      borderRadius: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Payment Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Payment Type\",\n        value: paymentData.paymentType,\n        onChange: e => handlePaymentChange('paymentType', e.target.value),\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Transaction ID\",\n        value: paymentData.transactionId,\n        onChange: e => handlePaymentChange('transactionId', e.target.value),\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Date\",\n        type: \"date\",\n        value: paymentData.date,\n        onChange: e => handlePaymentChange('date', e.target.value),\n        InputLabelProps: {\n          shrink: true\n        },\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Name of Bank\",\n        value: paymentData.bankName,\n        onChange: e => handlePaymentChange('bankName', e.target.value),\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Branch Details\",\n        value: paymentData.branchDetails,\n        onChange: e => handlePaymentChange('branchDetails', e.target.value),\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Amount (Rs.)\",\n        value: paymentData.amount,\n        onChange: e => handlePaymentChange('amount', e.target.value),\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Remarks, If Any\",\n      value: paymentData.remarks,\n      onChange: e => handlePaymentChange('remarks', e.target.value),\n      size: \"small\",\n      sx: {\n        mb: 3\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Document Uploads\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"S.No.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Document Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Upload File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: documents.map((doc, idx) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: idx + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: doc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \".pdf,.jpg,.png\",\n                onChange: e => handleFileChange(idx, e.target.files[0])\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 19\n              }, this), uploadedDocs[idx] && /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                color: \"primary\",\n                children: uploadedDocs[idx].name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 548,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentAndDocsSection, \"+Saejvc/iRgWDKW3uM3BR3I4gjA=\");\n_c = PaymentAndDocsSection;\nexport default PaymentAndDocsSection;\nvar _c;\n$RefreshReg$(_c, \"PaymentAndDocsSection\");","map":{"version":3,"names":["React","useState","Typography","TextField","Box","Table","TableBody","TableCell","TableHead","TableRow","Paper","TableContainer","jsxDEV","_jsxDEV","PaymentAndDocsSection","_s","documents","paymentData","setPaymentData","paymentType","transactionId","date","bankName","branchDetails","amount","remarks","uploadedDocs","setUploadedDocs","handleFileChange","index","file","prev","handlePaymentChange","field","value","sx","p","border","borderRadius","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","flexWrap","gap","mb","label","onChange","e","target","size","type","InputLabelProps","shrink","component","map","doc","idx","accept","files","color","name","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicationBPT/Application1.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     {subject :'Total Marks obtained in Intermediate/EquivalentExamination ', total:'', totalMax:'' },\n//     {subject: 'total  percentage'}\n//   ]);\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={'92.8'}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//       disabled\n//     />\n//   </TableCell>\n// </TableRow>\n//               </TableRow>\n\n\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// // export default Application1;\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' }\n//   ]);\n\n//   const [totalMarks, setTotalMarks] = useState({ obtained: '', max: '' });\n// const [totalPercentage, setTotalPercentage] = useState('');\n// const [groupMarks, setGroupMarks] = useState({ obtained: '', max: '' });\n// const [groupPercentage, setGroupPercentage] = useState('');\n\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {/* Render input fields for each subject */}\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n\n//             {/* Total Marks Row */}\n//            {/* Total Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Intermediate/Equivalent Examination</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.obtained}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.max}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Total Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={totalPercentage}\n//       onChange={(e) => setTotalPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Group</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.obtained}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.max}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage in Group</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={groupPercentage}\n//       onChange={(e) => setGroupPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n                                //2//\n\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [educationData, setEducationData] = useState([\n//     { className: 'Inter 2nd Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: 'Inter 1st Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '10th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '9th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '8th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '7th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '6th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' }\n//   ]);\n//   const [eapcetData, setEapcetData] = useState({\n//     registrationNumber: '',\n//     hallTicketNumber: '',\n//     rank: ''\n//   });\n  \n//   const handleChange = (index, field, value) => {\n//     const updated = [...educationData];\n//     updated[index][field] = value;\n//     setEducationData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Educational Details</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Class</TableCell>\n//               <TableCell>Year of Study</TableCell>\n//               <TableCell>Name of School / College</TableCell>\n//               <TableCell>Place</TableCell>\n//               <TableCell>State</TableCell>\n//               <TableCell>District</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {educationData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.className || '-'}</TableCell>\n\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.yearOfStudy}\n//                     onChange={(e) => handleChange(index, 'yearOfStudy', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.schoolName}\n//                     onChange={(e) => handleChange(index, 'schoolName', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.place}\n//                     onChange={(e) => handleChange(index, 'place', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.state}\n//                     onChange={(e) => handleChange(index, 'state', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.district}\n//                     onChange={(e) => handleChange(index, 'district', e.target.value)}\n//                   />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, my: 3 }}>\n//   <TextField\n//     label=\"TG EAPCET Registration Number\"\n//     value={eapcetData.registrationNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, registrationNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Hall Ticket Number\"\n//     value={eapcetData.hallTicketNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, hallTicketNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Rank\"\n//     value={eapcetData.rank}\n//     onChange={(e) => setEapcetData({ ...eapcetData, rank: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n// </Box>\n\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n\n\n//                    3           \n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import {\n//   Typography,\n//   TextField,\n//   Box\n// } from '@mui/material';\n\n// const AddressForm = () => {\n//   const [formData, setFormData] = useState({\n//     correspondence: {\n//       address: '',\n//       country: '',\n//       state: '',\n//       district: '',\n//       pinCode: '',\n//       mobile: '',\n//       email: ''\n//     },\n//     permanent: {\n//       address: '',\n//       country: '',\n//       state: '',\n//       district: '',\n//       pinCode: '',\n//       mobile: '',\n//       email: ''\n//     },\n//     otherInfo: ''\n//   });\n\n//   const handleChange = (section, field, value) => {\n//     setFormData((prev) => ({\n//       ...prev,\n//       [section]: {\n//         ...prev[section],\n//         [field]: value\n//       }\n//     }));\n//   };\n\n//   return (\n//     <Box sx={{ p: 8, border: '1px solid #ccc', borderRadius: 2 }}>\n//       {/* Correspondence Address */}\n//       <Typography variant=\"h6\" gutterBottom>Correspondence Address</Typography>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//         <TextField label=\"Address\" value={formData.correspondence.address} onChange={(e) => handleChange('correspondence', 'address', e.target.value)} size=\"small\" />\n//         <TextField label=\"Country\" value={formData.correspondence.country} onChange={(e) => handleChange('correspondence', 'country', e.target.value)} size=\"small\" />\n//         <TextField label=\"State\" value={formData.correspondence.state} onChange={(e) => handleChange('correspondence', 'state', e.target.value)} size=\"small\" />\n//         <TextField label=\"District\" value={formData.correspondence.district} onChange={(e) => handleChange('correspondence', 'district', e.target.value)} size=\"small\" />\n//         <TextField label=\"Pin Code\" value={formData.correspondence.pinCode} onChange={(e) => handleChange('correspondence', 'pinCode', e.target.value)} size=\"small\" />\n//         <TextField label=\"Mobile No.\" value={formData.correspondence.mobile} onChange={(e) => handleChange('correspondence', 'mobile', e.target.value)} size=\"small\" />\n//         <TextField label=\"Email ID\" value={formData.correspondence.email} onChange={(e) => handleChange('correspondence', 'email', e.target.value)} size=\"small\" />\n//       </Box>\n\n//       {/* Permanent Address */}\n//       <Typography variant=\"h6\" gutterBottom>Permanent Address</Typography>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//         <TextField label=\"Address\" value={formData.permanent.address} onChange={(e) => handleChange('permanent', 'address', e.target.value)} size=\"small\" />\n//         <TextField label=\"Country\" value={formData.permanent.country} onChange={(e) => handleChange('permanent', 'country', e.target.value)} size=\"small\" />\n//         <TextField label=\"State\" value={formData.permanent.state} onChange={(e) => handleChange('permanent', 'state', e.target.value)} size=\"small\" />\n//         <TextField label=\"District\" value={formData.permanent.district} onChange={(e) => handleChange('permanent', 'district', e.target.value)} size=\"small\" />\n//         <TextField label=\"Pin Code\" value={formData.permanent.pinCode} onChange={(e) => handleChange('permanent', 'pinCode', e.target.value)} size=\"small\" />\n//         <TextField label=\"Mobile No.\" value={formData.permanent.mobile} onChange={(e) => handleChange('permanent', 'mobile', e.target.value)} size=\"small\" />\n//         <TextField label=\"Email ID\" value={formData.permanent.email} onChange={(e) => handleChange('permanent', 'email', e.target.value)} size=\"small\" />\n//       </Box>\n\n//       {/* Other Info */}\n//       <Typography variant=\"h6\" gutterBottom>Other Details</Typography>\n//       <TextField\n//         label=\"Any Other Relevant Information\"\n//         multiline\n//         rows={3}\n//         value={formData.otherInfo}\n//         onChange={(e) => setFormData({ ...formData, otherInfo: e.target.value })}\n//         size=\"small\"\n//         sx={{ width: '100%' }}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default AddressForm;\n\n\n///////444\n\n\n\nimport React, { useState } from 'react';\nimport {\n  Typography,\n  TextField,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n  TableContainer\n} from '@mui/material';\n\nconst PaymentAndDocsSection = () => {\n  const documents = [\n    'CASTE CERTIFICATE',\n    '10th Class Marks Memo',\n    'INTERMEDIATE MARKS MEMO',\n    '6TH to 10TH Study and Conduct Certificate',\n    'INTER STUDY AND CONDUCT CERTIFICATE',\n    'TRANSFER OR MIGRATION CERTIFICATE of Intermediate',\n    'TELANGANA STATE EAPCET-2025 RANK CARD'\n  ];\n\n  const [paymentData, setPaymentData] = useState({\n    paymentType: 'Online Payment',\n    transactionId: '136189873101',\n    date: '2025-06-09',\n    bankName: '',\n    branchDetails: '',\n    amount: '2500',\n    remarks: 'Online Payment'\n  });\n\n  const [uploadedDocs, setUploadedDocs] = useState({});\n\n  const handleFileChange = (index, file) => {\n    setUploadedDocs(prev => ({\n      ...prev,\n      [index]: file\n    }));\n  };\n\n  const handlePaymentChange = (field, value) => {\n    setPaymentData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <Box sx={{ p: 9, border: '1px solid #ccc', borderRadius: 2 }}>\n      {/* Payment Details */}\n      <Typography variant=\"h6\" gutterBottom>Payment Details</Typography>\n\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 2 }}>\n        <TextField\n          label=\"Payment Type\"\n          value={paymentData.paymentType}\n          onChange={(e) => handlePaymentChange('paymentType', e.target.value)}\n          size=\"small\"\n        />\n        <TextField\n          label=\"Transaction ID\"\n          value={paymentData.transactionId}\n          onChange={(e) => handlePaymentChange('transactionId', e.target.value)}\n          size=\"small\"\n        />\n        <TextField\n          label=\"Date\"\n          type=\"date\"\n          value={paymentData.date}\n          onChange={(e) => handlePaymentChange('date', e.target.value)}\n          InputLabelProps={{ shrink: true }}\n          size=\"small\"\n        />\n      </Box>\n\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 2 }}>\n        <TextField\n          label=\"Name of Bank\"\n          value={paymentData.bankName}\n          onChange={(e) => handlePaymentChange('bankName', e.target.value)}\n          size=\"small\"\n        />\n        <TextField\n          label=\"Branch Details\"\n          value={paymentData.branchDetails}\n          onChange={(e) => handlePaymentChange('branchDetails', e.target.value)}\n          size=\"small\"\n        />\n        <TextField\n          label=\"Amount (Rs.)\"\n          value={paymentData.amount}\n          onChange={(e) => handlePaymentChange('amount', e.target.value)}\n          size=\"small\"\n        />\n      </Box>\n\n      <TextField\n        label=\"Remarks, If Any\"\n        value={paymentData.remarks}\n        onChange={(e) => handlePaymentChange('remarks', e.target.value)}\n        size=\"small\"\n        sx={{ mb: 3 }}\n      />\n\n      {/* Document Uploads */}\n      <Typography variant=\"h6\" gutterBottom>Document Uploads</Typography>\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>S.No.</TableCell>\n              <TableCell>Document Type</TableCell>\n              <TableCell>Upload File</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {documents.map((doc, idx) => (\n              <TableRow key={idx}>\n                <TableCell>{idx + 1}</TableCell>\n                <TableCell>{doc}</TableCell>\n                <TableCell>\n                  <input\n                    type=\"file\"\n                    accept=\".pdf,.jpg,.png\"\n                    onChange={(e) => handleFileChange(idx, e.target.files[0])}\n                  />\n                  {uploadedDocs[idx] && (\n                    <Typography variant=\"caption\" color=\"primary\">\n                      {uploadedDocs[idx].name}\n                    </Typography>\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n};\n\nexport default PaymentAndDocsSection;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}