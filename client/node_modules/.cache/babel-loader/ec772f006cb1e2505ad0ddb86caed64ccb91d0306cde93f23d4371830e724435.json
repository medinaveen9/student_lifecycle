{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicalPgMedicalStudents/FormComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const inlineStyles = {\n//   container: { borderRadius: '8px', width: '100%', maxWidth: '800px', margin: '0 auto' },\n//   field: { marginBottom: '18px' },\n//   label: { display: 'block', marginBottom: '5px', fontWeight: 'bold' },\n//   input: { padding: '10px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   textarea: { padding: '8px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   radioGroup: { display: 'flex', gap: '20px', marginTop: '5px' },\n//   button: {\n//     padding: '10px 20px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     backgroundColor: '#4b1d77',\n//     color: '#ffffff',\n//     cursor: 'pointer',\n//     fontSize: '15px',\n//     fontWeight: 500\n//   }\n// };\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const navigate = useNavigate();\n\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n//   const [previewMode, setPreviewMode] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handlePreview = (e) => {\n//     e.preventDefault();\n//     setPreviewMode(true);\n//   };\n\n//   const handleEdit = () => {\n//     setPreviewMode(false);\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   return (\n//     <div style={inlineStyles.container}>\n//       <h2>{formTitle}</h2>\n\n//       {!previewMode ? (\n//         <form onSubmit={handlePreview}>\n//           {fields.map((field, index) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <h2 key={`heading-${index}`} style={{ margin: '20px 0', color: '#4b1d77' }}>\n//                   {field.text}\n//                 </h2>\n//               );\n//             }\n\n//             return (\n//               <div key={field.name} style={inlineStyles.field}>\n//                 <label style={inlineStyles.label}>{field.label}</label>\n\n//                 {field.type === 'text' && (\n//                   <input\n//                     type=\"text\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n\n//                 {field.type === 'textarea' && (\n//                   <textarea\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     rows=\"4\"\n//                     style={inlineStyles.textarea}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'date' && (\n//                   <input\n//                     type=\"date\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'radio' && (\n//                   <div style={inlineStyles.radioGroup}>\n//                     {field.options.map((opt) => (\n//                       <label key={opt}>\n//                         <input\n//                           type=\"radio\"\n//                           name={field.name}\n//                           value={opt}\n//                           checked={formData[field.name] === opt}\n//                           onChange={handleChange}\n//                           required={field.required}\n//                         />{' '}\n//                         {opt}\n//                       </label>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n\n//           <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n//             <button type=\"submit\" style={inlineStyles.button}>Preview</button>\n//           </div>\n//         </form>\n//       ) : (\n//         <>\n//           <div style={{ padding: '20px', backgroundColor: '#f8f8f8', borderRadius: '8px' }}>\n//             <h3>Preview</h3>\n//             {fields.map((field) => (\n//               shouldDisplayField(field) && field.type !== 'heading' && (\n//                 <div key={field.name} style={{ marginBottom: '12px' }}>\n//                   <strong>{field.label}:</strong> {formData[field.name]}\n//                 </div>\n//               )\n//             ))}\n//           </div>\n//           <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"40px\", marginTop: \"20px\" }}>\n//             <button onClick={handleEdit} style={{ ...inlineStyles.button, backgroundColor: '#6c757d' }}>Edit</button>\n//             <button onClick={() => alert(\"Form submitted!\")} style={inlineStyles.button}>Submit</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;\n\nimport React, { useState } from 'react';\nimport { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormComponent = ({\n  formTitle,\n  fields\n}) => {\n  _s();\n  const initialState = fields.reduce((acc, field) => {\n    if (field.name) acc[field.name] = '';\n    return acc;\n  }, {});\n  const [formData, setFormData] = useState(initialState);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const shouldDisplayField = field => {\n    if (!field.conditional) return true;\n    const {\n      field: dependency,\n      value\n    } = field.conditional;\n    return formData[dependency] === value;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(formData);\n    alert('Form submitted!');\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 10,\n      border: '1px solid #ccc',\n      borderRadius: 2,\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      sx: {\n        fontWeight: 'bold',\n        mb: 4\n      },\n      children: formTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 3\n        },\n        children: fields.map((field, index) => {\n          if (!shouldDisplayField(field)) return null;\n\n          // Render heading type\n          if (field.type === 'heading') {\n            return /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontWeight: 'bold',\n                color: '#4b1d77',\n                mt: 2\n              },\n              children: field.text\n            }, `heading-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexDirection: 'column'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              fontWeight: \"bold\",\n              sx: {\n                mb: 1\n              },\n              children: [field.label, field.name && /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"span\",\n                variant: \"caption\",\n                sx: {\n                  ml: 1,\n                  color: 'gray'\n                },\n                children: [\"(\", field.name, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 17\n            }, this), field.type === 'text' || field.type === 'date' ? /*#__PURE__*/_jsxDEV(TextField, {\n              type: field.type,\n              name: field.name,\n              value: formData[field.name],\n              onChange: handleChange,\n              size: \"small\",\n              fullWidth: true,\n              required: field.required,\n              InputLabelProps: field.type === 'date' ? {\n                shrink: true\n              } : {}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 19\n            }, this) : field.type === 'textarea' ? /*#__PURE__*/_jsxDEV(TextField, {\n              multiline: true,\n              rows: 4,\n              name: field.name,\n              value: formData[field.name],\n              onChange: handleChange,\n              size: \"small\",\n              fullWidth: true,\n              required: field.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 19\n            }, this) : field.type === 'radio' ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n              row: true,\n              name: field.name,\n              value: formData[field.name],\n              onChange: handleChange,\n              children: field.options.map(opt => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: opt,\n                control: /*#__PURE__*/_jsxDEV(Radio, {\n                  required: field.required\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 34\n                }, this),\n                label: opt\n              }, opt, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this) : null]\n          }, field.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'right',\n          mt: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n};\n_s(FormComponent, \"T4yXvXp9ZUeg/I2tM6GijGKf8Os=\");\n_c = FormComponent;\nexport default FormComponent;\nvar _c;\n$RefreshReg$(_c, \"FormComponent\");","map":{"version":3,"names":["React","useState","Box","TextField","Typography","Button","Radio","RadioGroup","FormControlLabel","jsxDEV","_jsxDEV","FormComponent","formTitle","fields","_s","initialState","reduce","acc","field","name","formData","setFormData","handleChange","e","value","target","prev","shouldDisplayField","conditional","dependency","handleSubmit","preventDefault","console","log","alert","sx","p","border","borderRadius","maxWidth","margin","children","variant","gutterBottom","fontWeight","mb","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","display","flexDirection","gap","map","index","type","color","mt","text","label","component","ml","onChange","size","fullWidth","required","InputLabelProps","shrink","multiline","rows","row","options","opt","control","textAlign","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicalPgMedicalStudents/FormComponent.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const inlineStyles = {\n//   container: { borderRadius: '8px', width: '100%', maxWidth: '800px', margin: '0 auto' },\n//   field: { marginBottom: '18px' },\n//   label: { display: 'block', marginBottom: '5px', fontWeight: 'bold' },\n//   input: { padding: '10px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   textarea: { padding: '8px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   radioGroup: { display: 'flex', gap: '20px', marginTop: '5px' },\n//   button: {\n//     padding: '10px 20px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     backgroundColor: '#4b1d77',\n//     color: '#ffffff',\n//     cursor: 'pointer',\n//     fontSize: '15px',\n//     fontWeight: 500\n//   }\n// };\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const navigate = useNavigate();\n\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n//   const [previewMode, setPreviewMode] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handlePreview = (e) => {\n//     e.preventDefault();\n//     setPreviewMode(true);\n//   };\n\n//   const handleEdit = () => {\n//     setPreviewMode(false);\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   return (\n//     <div style={inlineStyles.container}>\n//       <h2>{formTitle}</h2>\n\n//       {!previewMode ? (\n//         <form onSubmit={handlePreview}>\n//           {fields.map((field, index) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <h2 key={`heading-${index}`} style={{ margin: '20px 0', color: '#4b1d77' }}>\n//                   {field.text}\n//                 </h2>\n//               );\n//             }\n\n//             return (\n//               <div key={field.name} style={inlineStyles.field}>\n//                 <label style={inlineStyles.label}>{field.label}</label>\n\n//                 {field.type === 'text' && (\n//                   <input\n//                     type=\"text\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n\n//                 {field.type === 'textarea' && (\n//                   <textarea\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     rows=\"4\"\n//                     style={inlineStyles.textarea}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'date' && (\n//                   <input\n//                     type=\"date\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'radio' && (\n//                   <div style={inlineStyles.radioGroup}>\n//                     {field.options.map((opt) => (\n//                       <label key={opt}>\n//                         <input\n//                           type=\"radio\"\n//                           name={field.name}\n//                           value={opt}\n//                           checked={formData[field.name] === opt}\n//                           onChange={handleChange}\n//                           required={field.required}\n//                         />{' '}\n//                         {opt}\n//                       </label>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n\n//           <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n//             <button type=\"submit\" style={inlineStyles.button}>Preview</button>\n//           </div>\n//         </form>\n//       ) : (\n//         <>\n//           <div style={{ padding: '20px', backgroundColor: '#f8f8f8', borderRadius: '8px' }}>\n//             <h3>Preview</h3>\n//             {fields.map((field) => (\n//               shouldDisplayField(field) && field.type !== 'heading' && (\n//                 <div key={field.name} style={{ marginBottom: '12px' }}>\n//                   <strong>{field.label}:</strong> {formData[field.name]}\n//                 </div>\n//               )\n//             ))}\n//           </div>\n//           <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"40px\", marginTop: \"20px\" }}>\n//             <button onClick={handleEdit} style={{ ...inlineStyles.button, backgroundColor: '#6c757d' }}>Edit</button>\n//             <button onClick={() => alert(\"Form submitted!\")} style={inlineStyles.button}>Submit</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n  \n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;\n\n\n\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  Typography,\n  Button,\n  Radio,\n  RadioGroup,\n  FormControlLabel\n} from '@mui/material';\n\nconst FormComponent = ({ formTitle, fields }) => {\n  const initialState = fields.reduce((acc, field) => {\n    if (field.name) acc[field.name] = '';\n    return acc;\n  }, {});\n\n  const [formData, setFormData] = useState(initialState);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const shouldDisplayField = (field) => {\n    if (!field.conditional) return true;\n    const { field: dependency, value } = field.conditional;\n    return formData[dependency] === value;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(formData);\n    alert('Form submitted!');\n  };\n\n  return (\n    <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n      <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', mb: 4 }}>\n        {formTitle}\n      </Typography>\n\n      <form onSubmit={handleSubmit}>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n          {fields.map((field, index) => {\n            if (!shouldDisplayField(field)) return null;\n\n            // Render heading type\n            if (field.type === 'heading') {\n              return (\n                <Typography key={`heading-${index}`} variant=\"h6\" sx={{ fontWeight: 'bold', color: '#4b1d77', mt: 2 }}>\n                  {field.text}\n                </Typography>\n              );\n            }\n\n            return (\n              <Box key={field.name} sx={{ display: 'flex', flexDirection: 'column' }}>\n                <Typography variant=\"body1\" fontWeight=\"bold\" sx={{ mb: 1 }}>\n                  {field.label}\n                  {field.name && (\n                    <Typography component=\"span\" variant=\"caption\" sx={{ ml: 1, color: 'gray' }}>\n                      ({field.name})\n                    </Typography>\n                  )}\n                </Typography>\n\n                {field.type === 'text' || field.type === 'date' ? (\n                  <TextField\n                    type={field.type}\n                    name={field.name}\n                    value={formData[field.name]}\n                    onChange={handleChange}\n                    size=\"small\"\n                    fullWidth\n                    required={field.required}\n                    InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n                  />\n                ) : field.type === 'textarea' ? (\n                  <TextField\n                    multiline\n                    rows={4}\n                    name={field.name}\n                    value={formData[field.name]}\n                    onChange={handleChange}\n                    size=\"small\"\n                    fullWidth\n                    required={field.required}\n                  />\n                ) : field.type === 'radio' ? (\n                  <RadioGroup\n                    row\n                    name={field.name}\n                    value={formData[field.name]}\n                    onChange={handleChange}\n                  >\n                    {field.options.map(opt => (\n                      <FormControlLabel\n                        key={opt}\n                        value={opt}\n                        control={<Radio required={field.required} />}\n                        label={opt}\n                      />\n                    ))}\n                  </RadioGroup>\n                ) : null}\n              </Box>\n            );\n          })}\n        </Box>\n\n        <Box sx={{ textAlign: 'right', mt: 4 }}>\n          <Button variant=\"contained\" type=\"submit\">Submit</Button>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default FormComponent;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}