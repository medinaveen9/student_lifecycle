{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/components/FormComponent3.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper, Button\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [submissionDate, setSubmissionDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value || updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n//     setSubjects(updated);\n//   };\n\n//   const handleSubmit = () => {\n//     console.log({\n//       rollNumber, name, sod, examDate, submissionDate,\n//       subjects, grandTotal, totalInWords\n//     });\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             {/* Grand Total Row */}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Aggregate Marks in Words */}\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       {/* Date and Registrar */}\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <TextField\n//           label=\"Dated\"\n//           type=\"date\"\n//           value={submissionDate}\n//           onChange={(e) => setSubmissionDate(e.target.value)}\n//           InputLabelProps={{ shrink: true }}\n//         />\n//         <Typography variant=\"subtitle1\" sx={{ alignSelf: 'center' }}><strong>EXECUTIVE REGISTRAR</strong></Typography>\n//       </Box>\n\n//       {/* Submit Button */}\n//       <Box sx={{ mt: 3 }}>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport { toWords } from 'number-to-words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormComponent3 = ({\n  title,\n  subjectsData,\n  idLabel = 'Roll Number'\n}) => {\n  _s();\n  const [name] = useState('John Doe');\n  const [sod] = useState('Richard Doe');\n  const [rollNumber] = useState('BPT12345');\n  const [examDate] = useState('June 2025');\n  const [submissionDate] = useState('2025-06-24');\n  const [subjects, setSubjects] = useState(subjectsData);\n  const [grandTotal, setGrandTotal] = useState(0);\n  const [totalInWords, setTotalInWords] = useState('');\n  useEffect(() => {\n    const total = subjects.reduce((acc, subj) => {\n      const theory = Number(subj.theorySecured || 0);\n      const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n      return acc + theory + practical;\n    }, 0);\n    setGrandTotal(total);\n    setTotalInWords(toWords(total));\n  }, [subjects]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      maxWidth: 1000,\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [idLabel, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 19\n      }, this), \" \", rollNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 19\n      }, this), \" \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"S/o. / D/o.:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 19\n      }, this), \" \", sod]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Month & Year of Exam:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 19\n      }, this), \" \", examDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: [/*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              backgroundColor: '\t#dddddd'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Subject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              colSpan: 3,\n              children: \"Theory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              colSpan: 3,\n              children: \"Practical / Viva\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              colSpan: 3,\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              backgroundColor: '\t#dddddd'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [subjects.map((subj, index) => {\n            const totalSecured = subj.practicalMax === 'NA' ? Number(subj.theorySecured || 0) : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.theoryMax\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.theoryMin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.theorySecured || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.practicalMax\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.practicalMin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.practicalMax === 'NA' ? 'NA' : subj.practicalSecured || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.totalMax\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.totalMin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: totalSecured\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.result || '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 9,\n              align: \"right\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Grand Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 52\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: grandTotal\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"T.M\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Aggregate marks (in words):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 21\n        }, this), \" \", totalInWords.toUpperCase()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3,\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Dated:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 21\n        }, this), \" \", submissionDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 5\n  }, this);\n};\n_s(FormComponent3, \"jRNh7/gJUTFTQIcKj5KdPVFa5Qs=\");\n_c = FormComponent3;\nexport default FormComponent3;\nvar _c;\n$RefreshReg$(_c, \"FormComponent3\");","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","toWords","jsxDEV","_jsxDEV","FormComponent3","title","subjectsData","idLabel","_s","name","sod","rollNumber","examDate","submissionDate","subjects","setSubjects","grandTotal","setGrandTotal","totalInWords","setTotalInWords","total","reduce","acc","subj","theory","Number","theorySecured","practical","practicalMax","practicalSecured","sx","p","maxWidth","mx","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","component","mt","backgroundColor","align","colSpan","map","index","totalSecured","theoryMax","theoryMin","practicalMin","totalMax","totalMin","result","toUpperCase","display","justifyContent","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/components/FormComponent3.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n    \n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper, Button\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [submissionDate, setSubmissionDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value || updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n//     setSubjects(updated);\n//   };\n\n//   const handleSubmit = () => {\n//     console.log({\n//       rollNumber, name, sod, examDate, submissionDate,\n//       subjects, grandTotal, totalInWords\n//     });\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             {/* Grand Total Row */}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Aggregate Marks in Words */}\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       {/* Date and Registrar */}\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <TextField\n//           label=\"Dated\"\n//           type=\"date\"\n//           value={submissionDate}\n//           onChange={(e) => setSubmissionDate(e.target.value)}\n//           InputLabelProps={{ shrink: true }}\n//         />\n//         <Typography variant=\"subtitle1\" sx={{ alignSelf: 'center' }}><strong>EXECUTIVE REGISTRAR</strong></Typography>\n//       </Box>\n\n//       {/* Submit Button */}\n//       <Box sx={{ mt: 3 }}>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\n\nimport React, { useEffect, useState } from 'react';\nimport {\n  Box, Typography, Table, TableBody, TableCell,\n  TableContainer, TableHead, TableRow, Paper\n} from '@mui/material';\nimport { toWords } from 'number-to-words';\n\nconst FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n  const [name] = useState('John Doe');\n  const [sod] = useState('Richard Doe');\n  const [rollNumber] = useState('BPT12345');\n  const [examDate] = useState('June 2025');\n  const [submissionDate] = useState('2025-06-24');\n  const [subjects, setSubjects] = useState(subjectsData);\n  const [grandTotal, setGrandTotal] = useState(0);\n  const [totalInWords, setTotalInWords] = useState('');\n\n  useEffect(() => {\n    const total = subjects.reduce((acc, subj) => {\n      const theory = Number(subj.theorySecured || 0);\n      const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n      return acc + theory + practical;\n    }, 0);\n    setGrandTotal(total);\n    setTotalInWords(toWords(total));\n  }, [subjects]);\n\n  return (\n    <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n      <Typography><strong>{idLabel}:</strong> {rollNumber}</Typography>\n      <Typography><strong>Name:</strong> {name}</Typography>\n      <Typography><strong>S/o. / D/o.:</strong> {sod}</Typography>\n      <Typography><strong>Month & Year of Exam:</strong> {examDate}</Typography>\n\n      <TableContainer component={Paper} sx={{ mt: 3 }}>\n        <Table>\n          <TableHead>\n            <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n              <TableCell  >Subject</TableCell>\n              <TableCell  align=\"center\" colSpan={3}>Theory</TableCell>\n              <TableCell  align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n              <TableCell  align=\"center\" colSpan={3}>Total</TableCell>\n              <TableCell >Result</TableCell>\n            </TableRow>\n            <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n              <TableCell />\n              <TableCell  >Max</TableCell>\n              <TableCell >Min</TableCell>\n              <TableCell  >Sec</TableCell>\n              <TableCell  >Max</TableCell>\n              <TableCell  >Min</TableCell>\n              <TableCell >Sec</TableCell>\n              <TableCell >Max</TableCell>\n              <TableCell >Min</TableCell>\n              <TableCell >Sec</TableCell>\n              <TableCell />\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {subjects.map((subj, index) => {\n              const totalSecured = subj.practicalMax === 'NA'\n                ? Number(subj.theorySecured || 0)\n                : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n              return (\n                <TableRow key={index}>\n                  <TableCell>{subj.name}</TableCell>\n                  <TableCell>{subj.theoryMax}</TableCell>\n                  <TableCell>{subj.theoryMin}</TableCell>\n                  <TableCell>{subj.theorySecured || 0}</TableCell>\n                  <TableCell>{subj.practicalMax}</TableCell>\n                  <TableCell>{subj.practicalMin}</TableCell>\n                  <TableCell>{subj.practicalMax === 'NA' ? 'NA' : subj.practicalSecured || 0}</TableCell>\n                  <TableCell>{subj.totalMax}</TableCell>\n                  <TableCell>{subj.totalMin}</TableCell>\n                  <TableCell>{totalSecured}</TableCell>\n                  <TableCell>{subj.result || '-'}</TableCell>\n                </TableRow>\n              );\n            })}\n            <TableRow>\n              <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n              <TableCell><strong>{grandTotal}</strong></TableCell>\n              <TableCell><strong>T.M</strong></TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <Box sx={{ mt: 3 }}>\n        <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n      </Box>\n\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n        <Typography><strong>Dated:</strong> {submissionDate}</Typography>\n    \n      </Box>\n    </Box>\n  );\n};\n\nexport default FormComponent3;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,GAAG,EAAEC,UAAU,EAAEC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAC5CC,cAAc,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,QACrC,eAAe;AACtB,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,OAAO,GAAG;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,IAAI,CAAC,GAAGlB,QAAQ,CAAC,UAAU,CAAC;EACnC,MAAM,CAACmB,GAAG,CAAC,GAAGnB,QAAQ,CAAC,aAAa,CAAC;EACrC,MAAM,CAACoB,UAAU,CAAC,GAAGpB,QAAQ,CAAC,UAAU,CAAC;EACzC,MAAM,CAACqB,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,WAAW,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}