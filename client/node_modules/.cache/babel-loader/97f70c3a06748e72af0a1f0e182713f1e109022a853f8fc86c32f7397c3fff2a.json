{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/Forms/BscNursing4YDCForms/NursingSemester1.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import FormComponent4 from '../BscNursing4YDCForms/FormComponent4';\n\n// const subjectsData = [\n//   {\n//     title: \"ENGL 101 Communicative English\",\n//     credits: 2,\n//     maxIA: 25,\n//     maxSE: 25,\n//     marksIA: 20,\n//     marksSE: 22,\n//     percentage: \"84%\",\n//     grade: \"A\",\n//     gradePoint: 8,\n//     creditPoints: 16,\n//     result: \"Pass\",\n//   },\n//   {\n//     title: \"ANAT 105 & PHYS 110 Applied Anotomy &Applied Physiology\",\n//     credits: 6,\n//     maxIA: 25,\n//     maxSE: 75,\n//     marksIA: 23,\n//     marksSE: 70,\n//     percentage: \"93%\",\n//     grade: \"A+\",\n//     gradePoint: 9,\n//     creditPoints: 54,\n//     result: \"Pass\",\n//   },\n//   {\n//     title: \"SOCI 115 & PHYSC 120 Applied sociology & Applied Psychology\",\n//     credits: 6,\n//     maxIA: 30,\n//     maxSE: 75,\n//     marksIA: 28,\n//     marksSE: 70,\n//     percentage: \"94%\",\n//     grade: \"A+\",\n//     gradePoint: 9,\n//     creditPoints: 54,\n//     result: \"Pass\",\n//   }\n// ];\n\n// const NursingSemester1 = () => {\n//   return (\n//     <FormComponent4\n//       title=\"First Year B.Sc. Nursing Marks Memo\"\n//       subjectsData={subjectsData}\n//     />\n//   );\n// };\n\n// export default NursingSemester1;\n\nimport React, { useState } from 'react';\nimport FormComponent4 from '../BscNursing4YDCForms/FormComponent4';\nimport axios from 'axios';\nimport { TextField, Button, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NursingSemester1 = () => {\n  _s();\n  const [studentId, setStudentId] = useState('');\n  const [semester, setSemester] = useState('');\n  const [subjectsData, setSubjectsData] = useState([]);\n  const [studentInfo, setStudentInfo] = useState({}); // for name, roll, etc.\n  const [sgpa, setSgpa] = useState('');\n  const handleFetch = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/marks', {\n        params: {\n          student_id: studentId,\n          semester\n        }\n      });\n      const data = response.data;\n      if (data.length > 0) {\n        setSubjectsData(data);\n\n        // Optional: If backend returns student details in each row, pick from first\n        setStudentInfo({\n          idLabel: 'Hall Ticket No:',\n          rollNumber: data[0].student_id,\n          name: data[0].student_name,\n          sod: data[0].sod,\n          examDate: data[0].exam_date\n        });\n\n        // Calculate SGPA (basic logic: total creditPoints / total credits)\n        const totalCredits = data.reduce((sum, sub) => sum + sub.credits, 0);\n        const totalCreditPoints = data.reduce((sum, sub) => sum + sub.credit_points, 0);\n        const calculatedSgpa = (totalCreditPoints / totalCredits).toFixed(2);\n        setSgpa(calculatedSgpa);\n      } else {\n        setSubjectsData([]);\n        alert('No data found');\n      }\n    } catch (error) {\n      console.error('Error fetching marks:', error);\n      alert('Failed to fetch data.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Student ID\",\n      value: studentId,\n      onChange: e => setStudentId(e.target.value),\n      sx: {\n        mr: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Semester\",\n      value: semester,\n      onChange: e => setSemester(e.target.value),\n      sx: {\n        mr: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleFetch,\n      children: \"Fetch Marks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), subjectsData.length > 0 && /*#__PURE__*/_jsxDEV(FormComponent4, {\n      title: \"First Year B.Sc. Nursing Marks Memo\",\n      subjectsData: subjectsData.map(sub => ({\n        title: sub.title,\n        credits: sub.credits,\n        maxIA: sub.max_ia,\n        maxSE: sub.max_se,\n        marksIA: sub.marks_ia,\n        marksSE: sub.marks_se,\n        percentage: sub.percentage,\n        grade: sub.grade,\n        gradePoint: sub.grade_point,\n        creditPoints: sub.credit_points,\n        result: sub.result\n      })),\n      idLabel: studentInfo.idLabel,\n      rollNumber: studentInfo.rollNumber,\n      name: studentInfo.name,\n      sod: studentInfo.sod,\n      examDate: studentInfo.examDate,\n      sgpa: sgpa\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(NursingSemester1, \"CqaTVQeivjHQECDgJ5861x3f8e8=\");\n_c = NursingSemester1;\nexport default NursingSemester1;\nvar _c;\n$RefreshReg$(_c, \"NursingSemester1\");","map":{"version":3,"names":["React","useState","FormComponent4","axios","TextField","Button","Box","jsxDEV","_jsxDEV","NursingSemester1","_s","studentId","setStudentId","semester","setSemester","subjectsData","setSubjectsData","studentInfo","setStudentInfo","sgpa","setSgpa","handleFetch","response","get","params","student_id","data","length","idLabel","rollNumber","name","student_name","sod","examDate","exam_date","totalCredits","reduce","sum","sub","credits","totalCreditPoints","credit_points","calculatedSgpa","toFixed","alert","error","console","sx","p","children","label","value","onChange","e","target","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","title","map","maxIA","max_ia","maxSE","max_se","marksIA","marks_ia","marksSE","marks_se","percentage","grade","gradePoint","grade_point","creditPoints","result","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/Forms/BscNursing4YDCForms/NursingSemester1.js"],"sourcesContent":["// import React from 'react';\n// import FormComponent4 from '../BscNursing4YDCForms/FormComponent4';\n\n// const subjectsData = [\n//   {\n//     title: \"ENGL 101 Communicative English\",\n//     credits: 2,\n//     maxIA: 25,\n//     maxSE: 25,\n//     marksIA: 20,\n//     marksSE: 22,\n//     percentage: \"84%\",\n//     grade: \"A\",\n//     gradePoint: 8,\n//     creditPoints: 16,\n//     result: \"Pass\",\n//   },\n//   {\n//     title: \"ANAT 105 & PHYS 110 Applied Anotomy &Applied Physiology\",\n//     credits: 6,\n//     maxIA: 25,\n//     maxSE: 75,\n//     marksIA: 23,\n//     marksSE: 70,\n//     percentage: \"93%\",\n//     grade: \"A+\",\n//     gradePoint: 9,\n//     creditPoints: 54,\n//     result: \"Pass\",\n//   },\n//   {\n//     title: \"SOCI 115 & PHYSC 120 Applied sociology & Applied Psychology\",\n//     credits: 6,\n//     maxIA: 30,\n//     maxSE: 75,\n//     marksIA: 28,\n//     marksSE: 70,\n//     percentage: \"94%\",\n//     grade: \"A+\",\n//     gradePoint: 9,\n//     creditPoints: 54,\n//     result: \"Pass\",\n//   }\n// ];\n\n// const NursingSemester1 = () => {\n//   return (\n//     <FormComponent4\n//       title=\"First Year B.Sc. Nursing Marks Memo\"\n//       subjectsData={subjectsData}\n//     />\n//   );\n// };\n\n// export default NursingSemester1;\n\n\nimport React, { useState } from 'react';\nimport FormComponent4 from '../BscNursing4YDCForms/FormComponent4';\nimport axios from 'axios';\nimport { TextField, Button, Box } from '@mui/material';\n\nconst NursingSemester1 = () => {\n  const [studentId, setStudentId] = useState('');\n  const [semester, setSemester] = useState('');\n  const [subjectsData, setSubjectsData] = useState([]);\n  const [studentInfo, setStudentInfo] = useState({}); // for name, roll, etc.\n  const [sgpa, setSgpa] = useState('');\n\n  const handleFetch = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/marks', {\n        params: { student_id: studentId, semester },\n      });\n\n      const data = response.data;\n\n      if (data.length > 0) {\n        setSubjectsData(data);\n\n        // Optional: If backend returns student details in each row, pick from first\n        setStudentInfo({\n          idLabel: 'Hall Ticket No:',\n          rollNumber: data[0].student_id,\n          name: data[0].student_name,\n          sod: data[0].sod,\n          examDate: data[0].exam_date,\n        });\n\n        // Calculate SGPA (basic logic: total creditPoints / total credits)\n        const totalCredits = data.reduce((sum, sub) => sum + sub.credits, 0);\n        const totalCreditPoints = data.reduce((sum, sub) => sum + sub.credit_points, 0);\n        const calculatedSgpa = (totalCreditPoints / totalCredits).toFixed(2);\n        setSgpa(calculatedSgpa);\n      } else {\n        setSubjectsData([]);\n        alert('No data found');\n      }\n    } catch (error) {\n      console.error('Error fetching marks:', error);\n      alert('Failed to fetch data.');\n    }\n  };\n\n  return (\n    <Box sx={{ p: 4 }}>\n      <TextField\n        label=\"Student ID\"\n        value={studentId}\n        onChange={(e) => setStudentId(e.target.value)}\n        sx={{ mr: 2 }}\n      />\n      <TextField\n        label=\"Semester\"\n        value={semester}\n        onChange={(e) => setSemester(e.target.value)}\n        sx={{ mr: 2 }}\n      />\n      <Button variant=\"contained\" onClick={handleFetch}>\n        Fetch Marks\n      </Button>\n\n      {subjectsData.length > 0 && (\n        <FormComponent4\n          title=\"First Year B.Sc. Nursing Marks Memo\"\n          subjectsData={subjectsData.map(sub => ({\n            title: sub.title,\n            credits: sub.credits,\n            maxIA: sub.max_ia,\n            maxSE: sub.max_se,\n            marksIA: sub.marks_ia,\n            marksSE: sub.marks_se,\n            percentage: sub.percentage,\n            grade: sub.grade,\n            gradePoint: sub.grade_point,\n            creditPoints: sub.credit_points,\n            result: sub.result\n          }))}\n          idLabel={studentInfo.idLabel}\n          rollNumber={studentInfo.rollNumber}\n          name={studentInfo.name}\n          sod={studentInfo.sod}\n          examDate={studentInfo.examDate}\n          sgpa={sgpa}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default NursingSemester1;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}