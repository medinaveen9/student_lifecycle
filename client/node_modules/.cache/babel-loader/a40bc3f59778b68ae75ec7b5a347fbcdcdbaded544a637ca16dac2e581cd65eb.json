{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const inlineStyles = {\n//   container: { borderRadius: '8px', width: '100%', maxWidth: '800px', margin: '0 auto' },\n//   field: { marginBottom: '18px' },\n//   label: { display: 'block', marginBottom: '5px', fontWeight: 'bold' },\n//   input: { padding: '10px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   textarea: { padding: '8px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   radioGroup: { display: 'flex', gap: '20px', marginTop: '5px' },\n//   button: {\n//     padding: '10px 20px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     backgroundColor: '#4b1d77',\n//     color: '#ffffff',\n//     cursor: 'pointer',\n//     fontSize: '15px',\n//     fontWeight: 500\n//   }\n// };\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const navigate = useNavigate();\n\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n//   const [previewMode, setPreviewMode] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handlePreview = (e) => {\n//     e.preventDefault();\n//     setPreviewMode(true);\n//   };\n\n//   const handleEdit = () => {\n//     setPreviewMode(false);\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   return (\n//     <div style={inlineStyles.container}>\n//       <h2>{formTitle}</h2>\n\n//       {!previewMode ? (\n//         <form onSubmit={handlePreview}>\n//           {fields.map((field, index) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <h2 key={`heading-${index}`} style={{ margin: '20px 0', color: '#4b1d77' }}>\n//                   {field.text}\n//                 </h2>\n//               );\n//             }\n\n//             return (\n//               <div key={field.name} style={inlineStyles.field}>\n//                 <label style={inlineStyles.label}>{field.label}</label>\n\n//                 {field.type === 'text' && (\n//                   <input\n//                     type=\"text\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n\n//                 {field.type === 'textarea' && (\n//                   <textarea\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     rows=\"4\"\n//                     style={inlineStyles.textarea}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'date' && (\n//                   <input\n//                     type=\"date\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'radio' && (\n//                   <div style={inlineStyles.radioGroup}>\n//                     {field.options.map((opt) => (\n//                       <label key={opt}>\n//                         <input\n//                           type=\"radio\"\n//                           name={field.name}\n//                           value={opt}\n//                           checked={formData[field.name] === opt}\n//                           onChange={handleChange}\n//                           required={field.required}\n//                         />{' '}\n//                         {opt}\n//                       </label>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n\n//           <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n//             <button type=\"submit\" style={inlineStyles.button}>Preview</button>\n//           </div>\n//         </form>\n//       ) : (\n//         <>\n//           <div style={{ padding: '20px', backgroundColor: '#f8f8f8', borderRadius: '8px' }}>\n//             <h3>Preview</h3>\n//             {fields.map((field) => (\n//               shouldDisplayField(field) && field.type !== 'heading' && (\n//                 <div key={field.name} style={{ marginBottom: '12px' }}>\n//                   <strong>{field.label}:</strong> {formData[field.name]}\n//                 </div>\n//               )\n//             ))}\n//           </div>\n//           <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"40px\", marginTop: \"20px\" }}>\n//             <button onClick={handleEdit} style={{ ...inlineStyles.button, backgroundColor: '#6c757d' }}>Edit</button>\n//             <button onClick={() => alert(\"Form submitted!\")} style={inlineStyles.button}>Submit</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;","map":{"version":3,"names":[],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicalPgMedicalStudents/FormComponent.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const inlineStyles = {\n//   container: { borderRadius: '8px', width: '100%', maxWidth: '800px', margin: '0 auto' },\n//   field: { marginBottom: '18px' },\n//   label: { display: 'block', marginBottom: '5px', fontWeight: 'bold' },\n//   input: { padding: '10px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   textarea: { padding: '8px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   radioGroup: { display: 'flex', gap: '20px', marginTop: '5px' },\n//   button: {\n//     padding: '10px 20px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     backgroundColor: '#4b1d77',\n//     color: '#ffffff',\n//     cursor: 'pointer',\n//     fontSize: '15px',\n//     fontWeight: 500\n//   }\n// };\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const navigate = useNavigate();\n\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n//   const [previewMode, setPreviewMode] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handlePreview = (e) => {\n//     e.preventDefault();\n//     setPreviewMode(true);\n//   };\n\n//   const handleEdit = () => {\n//     setPreviewMode(false);\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   return (\n//     <div style={inlineStyles.container}>\n//       <h2>{formTitle}</h2>\n\n//       {!previewMode ? (\n//         <form onSubmit={handlePreview}>\n//           {fields.map((field, index) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <h2 key={`heading-${index}`} style={{ margin: '20px 0', color: '#4b1d77' }}>\n//                   {field.text}\n//                 </h2>\n//               );\n//             }\n\n//             return (\n//               <div key={field.name} style={inlineStyles.field}>\n//                 <label style={inlineStyles.label}>{field.label}</label>\n\n//                 {field.type === 'text' && (\n//                   <input\n//                     type=\"text\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n\n//                 {field.type === 'textarea' && (\n//                   <textarea\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     rows=\"4\"\n//                     style={inlineStyles.textarea}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'date' && (\n//                   <input\n//                     type=\"date\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'radio' && (\n//                   <div style={inlineStyles.radioGroup}>\n//                     {field.options.map((opt) => (\n//                       <label key={opt}>\n//                         <input\n//                           type=\"radio\"\n//                           name={field.name}\n//                           value={opt}\n//                           checked={formData[field.name] === opt}\n//                           onChange={handleChange}\n//                           required={field.required}\n//                         />{' '}\n//                         {opt}\n//                       </label>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n\n//           <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n//             <button type=\"submit\" style={inlineStyles.button}>Preview</button>\n//           </div>\n//         </form>\n//       ) : (\n//         <>\n//           <div style={{ padding: '20px', backgroundColor: '#f8f8f8', borderRadius: '8px' }}>\n//             <h3>Preview</h3>\n//             {fields.map((field) => (\n//               shouldDisplayField(field) && field.type !== 'heading' && (\n//                 <div key={field.name} style={{ marginBottom: '12px' }}>\n//                   <strong>{field.label}:</strong> {formData[field.name]}\n//                 </div>\n//               )\n//             ))}\n//           </div>\n//           <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"40px\", marginTop: \"20px\" }}>\n//             <button onClick={handleEdit} style={{ ...inlineStyles.button, backgroundColor: '#6c757d' }}>Edit</button>\n//             <button onClick={() => alert(\"Form submitted!\")} style={inlineStyles.button}>Submit</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n  \n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}