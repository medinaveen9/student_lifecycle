{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicationBPT/Application1.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     {subject :'Total Marks obtained in Intermediate/EquivalentExamination ', total:'', totalMax:'' },\n//     {subject: 'total  percentage'}\n//   ]);\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={'92.8'}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//       disabled\n//     />\n//   </TableCell>\n// </TableRow>\n//               </TableRow>\n\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// // export default Application1;\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' }\n//   ]);\n\n//   const [totalMarks, setTotalMarks] = useState({ obtained: '', max: '' });\n// const [totalPercentage, setTotalPercentage] = useState('');\n// const [groupMarks, setGroupMarks] = useState({ obtained: '', max: '' });\n// const [groupPercentage, setGroupPercentage] = useState('');\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {/* Render input fields for each subject */}\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n\n//             {/* Total Marks Row */}\n//            {/* Total Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Intermediate/Equivalent Examination</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.obtained}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.max}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Total Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={totalPercentage}\n//       onChange={(e) => setTotalPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Group</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.obtained}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.max}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage in Group</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={groupPercentage}\n//       onChange={(e) => setGroupPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n//2//\n\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [educationData, setEducationData] = useState([\n//     { className: 'Inter 2nd Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: 'Inter 1st Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '10th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '9th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '8th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '7th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '6th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' }\n//   ]);\n//   const [eapcetData, setEapcetData] = useState({\n//     registrationNumber: '',\n//     hallTicketNumber: '',\n//     rank: ''\n//   });\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...educationData];\n//     updated[index][field] = value;\n//     setEducationData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Educational Details</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Class</TableCell>\n//               <TableCell>Year of Study</TableCell>\n//               <TableCell>Name of School / College</TableCell>\n//               <TableCell>Place</TableCell>\n//               <TableCell>State</TableCell>\n//               <TableCell>District</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {educationData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.className || '-'}</TableCell>\n\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.yearOfStudy}\n//                     onChange={(e) => handleChange(index, 'yearOfStudy', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.schoolName}\n//                     onChange={(e) => handleChange(index, 'schoolName', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.place}\n//                     onChange={(e) => handleChange(index, 'place', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.state}\n//                     onChange={(e) => handleChange(index, 'state', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.district}\n//                     onChange={(e) => handleChange(index, 'district', e.target.value)}\n//                   />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, my: 3 }}>\n//   <TextField\n//     label=\"TG EAPCET Registration Number\"\n//     value={eapcetData.registrationNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, registrationNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Hall Ticket Number\"\n//     value={eapcetData.hallTicketNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, hallTicketNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Rank\"\n//     value={eapcetData.rank}\n//     onChange={(e) => setEapcetData({ ...eapcetData, rank: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n// </Box>\n\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n//                    3           \n\nimport React, { useState } from 'react';\nimport { Typography, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddressForm = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    correspondence: {\n      address: '',\n      country: '',\n      state: '',\n      district: '',\n      pinCode: '',\n      mobile: '',\n      email: ''\n    },\n    permanent: {\n      address: '',\n      country: '',\n      state: '',\n      district: '',\n      pinCode: '',\n      mobile: '',\n      email: ''\n    },\n    otherInfo: ''\n  });\n  const handleChange = (section, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [field]: value\n      }\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Correspondence Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Address\",\n      value: formData.correspondence.address,\n      onChange: e => handleChange('correspondence', 'address', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Country\",\n      value: formData.correspondence.country,\n      onChange: e => handleChange('correspondence', 'country', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"State\",\n      value: formData.correspondence.state,\n      onChange: e => handleChange('correspondence', 'state', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"District\",\n      value: formData.correspondence.district,\n      onChange: e => handleChange('correspondence', 'district', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Pin Code\",\n      value: formData.correspondence.pinCode,\n      onChange: e => handleChange('correspondence', 'pinCode', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Mobile No.\",\n      value: formData.correspondence.mobile,\n      onChange: e => handleChange('correspondence', 'mobile', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Email ID\",\n      value: formData.correspondence.email,\n      onChange: e => handleChange('correspondence', 'email', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Permanent Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Address\",\n      value: formData.permanent.address,\n      onChange: e => handleChange('permanent', 'address', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Country\",\n      value: formData.permanent.country,\n      onChange: e => handleChange('permanent', 'country', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"State\",\n      value: formData.permanent.state,\n      onChange: e => handleChange('permanent', 'state', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"District\",\n      value: formData.permanent.district,\n      onChange: e => handleChange('permanent', 'district', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Pin Code\",\n      value: formData.permanent.pinCode,\n      onChange: e => handleChange('permanent', 'pinCode', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Mobile No.\",\n      value: formData.permanent.mobile,\n      onChange: e => handleChange('permanent', 'mobile', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Email ID\",\n      value: formData.permanent.email,\n      onChange: e => handleChange('permanent', 'email', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Other Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      margin: \"normal\",\n      label: \"Any Other Relevant Information\",\n      multiline: true,\n      rows: 3,\n      value: formData.otherInfo,\n      onChange: e => setFormData({\n        ...formData,\n        otherInfo: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(AddressForm, \"hor53DPE/192pDITePn0SQPPG00=\");\n_c = AddressForm;\nexport default AddressForm;\nvar _c;\n$RefreshReg$(_c, \"AddressForm\");","map":{"version":3,"names":["React","useState","Typography","TextField","jsxDEV","_jsxDEV","Fragment","_Fragment","AddressForm","_s","formData","setFormData","correspondence","address","country","state","district","pinCode","mobile","email","permanent","otherInfo","handleChange","section","field","value","prev","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","fullWidth","margin","label","onChange","e","target","multiline","rows","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicationBPT/Application1.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     {subject :'Total Marks obtained in Intermediate/EquivalentExamination ', total:'', totalMax:'' },\n//     {subject: 'total  percentage'}\n//   ]);\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={'92.8'}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//       disabled\n//     />\n//   </TableCell>\n// </TableRow>\n//               </TableRow>\n\n\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// // export default Application1;\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [subjectsData, setSubjectsData] = useState([\n//     { subject: 'Botany', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Zoology', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Physics', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Chemistry', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'English', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' },\n//     { subject: 'Second Language', t1: '', t1Max: '', t2: '', t2Max: '', practical: '', practicalMax: '', total: '', totalMax: '' }\n//   ]);\n\n//   const [totalMarks, setTotalMarks] = useState({ obtained: '', max: '' });\n// const [totalPercentage, setTotalPercentage] = useState('');\n// const [groupMarks, setGroupMarks] = useState({ obtained: '', max: '' });\n// const [groupPercentage, setGroupPercentage] = useState('');\n\n\n//   const handleChange = (index, field, value) => {\n//     const updated = [...subjectsData];\n//     updated[index][field] = value;\n//     setSubjectsData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Intermediate Marks Entry</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell>1st Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>2nd Yr Theory</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Practical</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Total</TableCell>\n//               <TableCell>Max</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {/* Render input fields for each subject */}\n//             {subjectsData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.subject}</TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1} onChange={(e) => handleChange(index, 't1', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t1Max} onChange={(e) => handleChange(index, 't1Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2} onChange={(e) => handleChange(index, 't2', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.t2Max} onChange={(e) => handleChange(index, 't2Max', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practical} onChange={(e) => handleChange(index, 'practical', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.practicalMax} onChange={(e) => handleChange(index, 'practicalMax', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.total} onChange={(e) => handleChange(index, 'total', e.target.value)} />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField size=\"small\" value={row.totalMax} onChange={(e) => handleChange(index, 'totalMax', e.target.value)} />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n\n//             {/* Total Marks Row */}\n//            {/* Total Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Intermediate/Equivalent Examination</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.obtained}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={totalMarks.max}\n//       onChange={(e) => setTotalMarks({ ...totalMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Total Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={totalPercentage}\n//       onChange={(e) => setTotalPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Marks Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Marks obtained in Group</TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.obtained}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, obtained: e.target.value })}\n//     />\n//   </TableCell>\n//   <TableCell>\n//     <TextField\n//       size=\"small\"\n//       value={groupMarks.max}\n//       onChange={(e) => setGroupMarks({ ...groupMarks, max: e.target.value })}\n//     />\n//   </TableCell>\n// </TableRow>\n\n// {/* Group Percentage Row */}\n// <TableRow>\n//   <TableCell colSpan={7} sx={{ fontWeight: 'bold' }}>Total Percentage in Group</TableCell>\n//   <TableCell colSpan={2}>\n//     <TextField\n//       size=\"small\"\n//       value={groupPercentage}\n//       onChange={(e) => setGroupPercentage(e.target.value)}\n//       InputProps={{ endAdornment: <span>%</span> }}\n//     />\n//   </TableCell>\n// </TableRow>\n\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n                                //2//\n\n// import React, { useState } from 'react';\n// import {\n//   TextField,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Box,\n//   Typography\n// } from '@mui/material';\n\n// const Application1 = () => {\n//   const [educationData, setEducationData] = useState([\n//     { className: 'Inter 2nd Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: 'Inter 1st Year', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '10th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '9th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '8th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '7th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' },\n//     { className: '6th Class', yearOfStudy: '', schoolName: '', place: '', state: '', district: '' }\n//   ]);\n//   const [eapcetData, setEapcetData] = useState({\n//     registrationNumber: '',\n//     hallTicketNumber: '',\n//     rank: ''\n//   });\n  \n//   const handleChange = (index, field, value) => {\n//     const updated = [...educationData];\n//     updated[index][field] = value;\n//     setEducationData(updated);\n//   };\n\n//   return (\n//     <Box sx={{ pt: 9, px: 6, pb: 7 }}>\n//       <Typography variant=\"h6\" gutterBottom>Educational Details</Typography>\n\n//       <TableContainer component={Paper}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#dddddd' }}>\n//               <TableCell>Class</TableCell>\n//               <TableCell>Year of Study</TableCell>\n//               <TableCell>Name of School / College</TableCell>\n//               <TableCell>Place</TableCell>\n//               <TableCell>State</TableCell>\n//               <TableCell>District</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {educationData.map((row, index) => (\n//               <TableRow key={index}>\n//                 <TableCell>{row.className || '-'}</TableCell>\n\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.yearOfStudy}\n//                     onChange={(e) => handleChange(index, 'yearOfStudy', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.schoolName}\n//                     onChange={(e) => handleChange(index, 'schoolName', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.place}\n//                     onChange={(e) => handleChange(index, 'place', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.state}\n//                     onChange={(e) => handleChange(index, 'state', e.target.value)}\n//                   />\n//                 </TableCell>\n//                 <TableCell>\n//                   <TextField\n//                     size=\"small\"\n//                     value={row.district}\n//                     onChange={(e) => handleChange(index, 'district', e.target.value)}\n//                   />\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//       <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, my: 3 }}>\n//   <TextField\n//     label=\"TG EAPCET Registration Number\"\n//     value={eapcetData.registrationNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, registrationNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Hall Ticket Number\"\n//     value={eapcetData.hallTicketNumber}\n//     onChange={(e) => setEapcetData({ ...eapcetData, hallTicketNumber: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n//   <TextField\n//     label=\"TG EAPCET Rank\"\n//     value={eapcetData.rank}\n//     onChange={(e) => setEapcetData({ ...eapcetData, rank: e.target.value })}\n//     size=\"small\"\n//     fullWidth\n//   />\n// </Box>\n\n//     </Box>\n//   );\n// };\n\n// export default Application1;\n\n\n\n//                    3           \n\n\n\n\n\n\n\n\nimport React, { useState } from 'react';\nimport { Typography, TextField } from '@mui/material';\n\nconst AddressForm = () => {\n  const [formData, setFormData] = useState({\n    correspondence: {\n      address: '',\n      country: '',\n      state: '',\n      district: '',\n      pinCode: '',\n      mobile: '',\n      email: ''\n    },\n    permanent: {\n      address: '',\n      country: '',\n      state: '',\n      district: '',\n      pinCode: '',\n      mobile: '',\n      email: ''\n    },\n    otherInfo: ''\n  });\n\n  const handleChange = (section, field, value) => {\n    setFormData((prev) => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [field]: value\n      }\n    }));\n  };\n\n  return (\n    <>\n      {/* Correspondence Address */}\n      <Typography variant=\"h6\" gutterBottom>Correspondence Address</Typography>\n      <TextField fullWidth margin=\"normal\" label=\"Address\" value={formData.correspondence.address} onChange={(e) => handleChange('correspondence', 'address', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Country\" value={formData.correspondence.country} onChange={(e) => handleChange('correspondence', 'country', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"State\" value={formData.correspondence.state} onChange={(e) => handleChange('correspondence', 'state', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"District\" value={formData.correspondence.district} onChange={(e) => handleChange('correspondence', 'district', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Pin Code\" value={formData.correspondence.pinCode} onChange={(e) => handleChange('correspondence', 'pinCode', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Mobile No.\" value={formData.correspondence.mobile} onChange={(e) => handleChange('correspondence', 'mobile', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Email ID\" value={formData.correspondence.email} onChange={(e) => handleChange('correspondence', 'email', e.target.value)} />\n\n      {/* Permanent Address */}\n      <Typography variant=\"h6\" gutterBottom>Permanent Address</Typography>\n      <TextField fullWidth margin=\"normal\" label=\"Address\" value={formData.permanent.address} onChange={(e) => handleChange('permanent', 'address', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Country\" value={formData.permanent.country} onChange={(e) => handleChange('permanent', 'country', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"State\" value={formData.permanent.state} onChange={(e) => handleChange('permanent', 'state', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"District\" value={formData.permanent.district} onChange={(e) => handleChange('permanent', 'district', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Pin Code\" value={formData.permanent.pinCode} onChange={(e) => handleChange('permanent', 'pinCode', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Mobile No.\" value={formData.permanent.mobile} onChange={(e) => handleChange('permanent', 'mobile', e.target.value)} />\n      <TextField fullWidth margin=\"normal\" label=\"Email ID\" value={formData.permanent.email} onChange={(e) => handleChange('permanent', 'email', e.target.value)} />\n\n      {/* Other Info */}\n      <Typography variant=\"h6\" gutterBottom>Other Details</Typography>\n      <TextField\n        fullWidth\n        margin=\"normal\"\n        label=\"Any Other Relevant Information\"\n        multiline\n        rows={3}\n        value={formData.otherInfo}\n        onChange={(e) => setFormData({ ...formData, otherInfo: e.target.value })}\n      />\n    </>\n  );\n};\n\nexport default AddressForm;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEgC;;AAEhvC,SAASC,UAAU,EAAEC,SAAS,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC;IACvCW,cAAc,EAAE;MACdC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE;IACT,CAAC;IACDC,SAAS,EAAE;MACTP,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE;IACT,CAAC;IACDE,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAGA,CAACC,OAAO,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC9Cd,WAAW,CAAEe,IAAI,KAAM;MACrB,GAAGA,IAAI;MACP,CAACH,OAAO,GAAG;QACT,GAAGG,IAAI,CAACH,OAAO,CAAC;QAChB,CAACC,KAAK,GAAGC;MACX;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEpB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBAEEtB,OAAA,CAACH,UAAU;MAAC0B,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAAsB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACzE5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,SAAS;MAACX,KAAK,EAAEf,QAAQ,CAACE,cAAc,CAACC,OAAQ;MAACwB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,gBAAgB,EAAE,SAAS,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3K5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,SAAS;MAACX,KAAK,EAAEf,QAAQ,CAACE,cAAc,CAACE,OAAQ;MAACuB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,gBAAgB,EAAE,SAAS,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3K5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,OAAO;MAACX,KAAK,EAAEf,QAAQ,CAACE,cAAc,CAACG,KAAM;MAACsB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,gBAAgB,EAAE,OAAO,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrK5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,UAAU;MAACX,KAAK,EAAEf,QAAQ,CAACE,cAAc,CAACI,QAAS;MAACqB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,gBAAgB,EAAE,UAAU,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9K5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,UAAU;MAACX,KAAK,EAAEf,QAAQ,CAACE,cAAc,CAACK,OAAQ;MAACoB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,gBAAgB,EAAE,SAAS,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5K5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,YAAY;MAACX,KAAK,EAAEf,QAAQ,CAACE,cAAc,CAACM,MAAO;MAACmB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,gBAAgB,EAAE,QAAQ,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5K5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,UAAU;MAACX,KAAK,EAAEf,QAAQ,CAACE,cAAc,CAACO,KAAM;MAACkB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,gBAAgB,EAAE,OAAO,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGxK5B,OAAA,CAACH,UAAU;MAAC0B,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAAiB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACpE5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,SAAS;MAACX,KAAK,EAAEf,QAAQ,CAACU,SAAS,CAACP,OAAQ;MAACwB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,WAAW,EAAE,SAAS,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjK5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,SAAS;MAACX,KAAK,EAAEf,QAAQ,CAACU,SAAS,CAACN,OAAQ;MAACuB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,WAAW,EAAE,SAAS,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjK5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,OAAO;MAACX,KAAK,EAAEf,QAAQ,CAACU,SAAS,CAACL,KAAM;MAACsB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,WAAW,EAAE,OAAO,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3J5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,UAAU;MAACX,KAAK,EAAEf,QAAQ,CAACU,SAAS,CAACJ,QAAS;MAACqB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,WAAW,EAAE,UAAU,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpK5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,UAAU;MAACX,KAAK,EAAEf,QAAQ,CAACU,SAAS,CAACH,OAAQ;MAACoB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,WAAW,EAAE,SAAS,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClK5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,YAAY;MAACX,KAAK,EAAEf,QAAQ,CAACU,SAAS,CAACF,MAAO;MAACmB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,WAAW,EAAE,QAAQ,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClK5B,OAAA,CAACF,SAAS;MAAC+B,SAAS;MAACC,MAAM,EAAC,QAAQ;MAACC,KAAK,EAAC,UAAU;MAACX,KAAK,EAAEf,QAAQ,CAACU,SAAS,CAACD,KAAM;MAACkB,QAAQ,EAAGC,CAAC,IAAKhB,YAAY,CAAC,WAAW,EAAE,OAAO,EAAEgB,CAAC,CAACC,MAAM,CAACd,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG9J5B,OAAA,CAACH,UAAU;MAAC0B,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAChE5B,OAAA,CAACF,SAAS;MACR+B,SAAS;MACTC,MAAM,EAAC,QAAQ;MACfC,KAAK,EAAC,gCAAgC;MACtCI,SAAS;MACTC,IAAI,EAAE,CAAE;MACRhB,KAAK,EAAEf,QAAQ,CAACW,SAAU;MAC1BgB,QAAQ,EAAGC,CAAC,IAAK3B,WAAW,CAAC;QAAE,GAAGD,QAAQ;QAAEW,SAAS,EAAEiB,CAAC,CAACC,MAAM,CAACd;MAAM,CAAC;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CAAC;EAAA,eACF,CAAC;AAEP,CAAC;AAACxB,EAAA,CApEID,WAAW;AAAAkC,EAAA,GAAXlC,WAAW;AAsEjB,eAAeA,WAAW;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}