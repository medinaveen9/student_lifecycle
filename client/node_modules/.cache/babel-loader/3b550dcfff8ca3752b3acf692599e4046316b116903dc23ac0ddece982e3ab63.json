{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/components/FormComponent3.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, TextField, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\nimport { toWords } from 'number-to-words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormComponent3 = ({\n  title,\n  subjectsData,\n  idLabel = 'Roll Number'\n}) => {\n  _s();\n  const [name, setName] = useState('');\n  const [sod, setSod] = useState('');\n  const [rollNumber, setRollNumber] = useState('');\n  const [examDate, setExamDate] = useState('');\n  const [submissionDate, setSubmissionDate] = useState('');\n  const [subjects, setSubjects] = useState(subjectsData);\n  const [grandTotal, setGrandTotal] = useState(0);\n  const [totalInWords, setTotalInWords] = useState('');\n  useEffect(() => {\n    const total = subjects.reduce((acc, subj) => {\n      const theory = Number(subj.theorySecured || 0);\n      const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n      return acc + theory + practical;\n    }, 0);\n    setGrandTotal(total);\n    setTotalInWords(toWords(total));\n  }, [subjects]);\n  const handleMarksChange = (index, field, value) => {\n    const updated = [...subjects];\n    updated[index][field] = value;\n    const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n    const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n    updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n    setSubjects(updated);\n  };\n  const handleSubmit = () => {\n    console.log({\n      rollNumber,\n      name,\n      sod,\n      examDate,\n      submissionDate,\n      subjects,\n      grandTotal,\n      totalInWords\n    });\n    alert('Form submitted!');\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      maxWidth: 1000,\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: idLabel,\n      fullWidth: true,\n      margin: \"normal\",\n      value: rollNumber,\n      onChange: e => setRollNumber(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Name\",\n      fullWidth: true,\n      margin: \"normal\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"S/o. / D/o.\",\n      fullWidth: true,\n      margin: \"normal\",\n      value: sod,\n      onChange: e => setSod(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Month & Year of Exam\",\n      fullWidth: true,\n      margin: \"normal\",\n      value: examDate,\n      onChange: e => setExamDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: [/*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              backgroundColor: '#f0f0f0'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Subject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              colSpan: 3,\n              children: \"Theory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              colSpan: 3,\n              children: \"Practical / Viva\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              colSpan: 3,\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              backgroundColor: '#f9f9f9'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [subjects.map((subj, index) => {\n            const totalSecured = subj.practicalMax === 'NA' ? Number(subj.theorySecured || 0) : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.theoryMax\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.theoryMin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  type: \"number\",\n                  size: \"small\",\n                  value: subj.theorySecured,\n                  onChange: e => handleMarksChange(index, 'theorySecured', e.target.value),\n                  sx: {\n                    width: 70\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.practicalMax\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.practicalMin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.practicalMax === 'NA' ? 'NA' : /*#__PURE__*/_jsxDEV(TextField, {\n                  type: \"number\",\n                  size: \"small\",\n                  value: subj.practicalSecured,\n                  onChange: e => handleMarksChange(index, 'practicalSecured', e.target.value),\n                  sx: {\n                    width: 70\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.totalMax\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.totalMin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: totalSecured\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subj.result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 9,\n              align: \"right\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Grand Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 52\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: grandTotal\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"T.M\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Aggregate marks (in words):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this), \" \", totalInWords.toUpperCase()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3,\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Dated\",\n        type: \"date\",\n        value: submissionDate,\n        onChange: e => setSubmissionDate(e.target.value),\n        InputLabelProps: {\n          shrink: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        sx: {\n          alignSelf: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"EXECUTIVE REGISTRAR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 70\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n_s(FormComponent3, \"JlQoTXLqoxDlLx3sr0caHrJCUs0=\");\n_c = FormComponent3;\nexport default FormComponent3;\nvar _c;\n$RefreshReg$(_c, \"FormComponent3\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","TextField","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Button","toWords","jsxDEV","_jsxDEV","FormComponent3","title","subjectsData","idLabel","_s","name","setName","sod","setSod","rollNumber","setRollNumber","examDate","setExamDate","submissionDate","setSubmissionDate","subjects","setSubjects","grandTotal","setGrandTotal","totalInWords","setTotalInWords","total","reduce","acc","subj","theory","Number","theorySecured","practical","practicalMax","practicalSecured","handleMarksChange","index","field","value","updated","theoryPass","theoryMin","practicalPass","practicalMin","result","handleSubmit","console","log","alert","sx","p","maxWidth","mx","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","label","fullWidth","margin","onChange","e","target","component","mt","backgroundColor","align","colSpan","map","totalSecured","theoryMax","type","size","width","totalMax","totalMin","toUpperCase","display","justifyContent","InputLabelProps","shrink","alignSelf","color","onClick","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/components/FormComponent3.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n    \n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box, Typography, TextField, Table, TableBody, TableCell,\n  TableContainer, TableHead, TableRow, Paper, Button\n} from '@mui/material';\nimport { toWords } from 'number-to-words';\n\nconst FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n  const [name, setName] = useState('');\n  const [sod, setSod] = useState('');\n  const [rollNumber, setRollNumber] = useState('');\n  const [examDate, setExamDate] = useState('');\n  const [submissionDate, setSubmissionDate] = useState('');\n  const [subjects, setSubjects] = useState(subjectsData);\n  const [grandTotal, setGrandTotal] = useState(0);\n  const [totalInWords, setTotalInWords] = useState('');\n\n  useEffect(() => {\n    const total = subjects.reduce((acc, subj) => {\n      const theory = Number(subj.theorySecured || 0);\n      const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n      return acc + theory + practical;\n    }, 0);\n    setGrandTotal(total);\n    setTotalInWords(toWords(total));\n  }, [subjects]);\n\n  const handleMarksChange = (index, field, value) => {\n    const updated = [...subjects];\n    updated[index][field] = value;\n\n    const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n    const practicalPass =\n      !value || updated[index].practicalMax === 'NA' ||\n      Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n    updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n    setSubjects(updated);\n  };\n\n  const handleSubmit = () => {\n    console.log({\n      rollNumber, name, sod, examDate, submissionDate,\n      subjects, grandTotal, totalInWords\n    });\n    alert('Form submitted!');\n  };\n\n  return (\n    <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n      <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n      <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n      <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n      <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n      <TableContainer component={Paper} sx={{ mt: 3 }}>\n        <Table>\n          <TableHead>\n            <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n              <TableCell>Subject</TableCell>\n              <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n              <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n              <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n              <TableCell>Result</TableCell>\n            </TableRow>\n            <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n              <TableCell />\n              <TableCell>Max</TableCell>\n              <TableCell>Min</TableCell>\n              <TableCell>Sec</TableCell>\n              <TableCell>Max</TableCell>\n              <TableCell>Min</TableCell>\n              <TableCell>Sec</TableCell>\n              <TableCell>Max</TableCell>\n              <TableCell>Min</TableCell>\n              <TableCell>Sec</TableCell>\n              <TableCell />\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {subjects.map((subj, index) => {\n              const totalSecured = subj.practicalMax === 'NA'\n                ? Number(subj.theorySecured || 0)\n                : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n              return (\n                <TableRow key={index}>\n                  <TableCell>{subj.name}</TableCell>\n                  <TableCell>{subj.theoryMax}</TableCell>\n                  <TableCell>{subj.theoryMin}</TableCell>\n                  <TableCell>\n                    <TextField\n                      type=\"number\"\n                      size=\"small\"\n                      value={subj.theorySecured}\n                      onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n                      sx={{ width: 70 }}\n                    />\n                  </TableCell>\n                  <TableCell>{subj.practicalMax}</TableCell>\n                  <TableCell>{subj.practicalMin}</TableCell>\n                  <TableCell>\n                    {subj.practicalMax === 'NA' ? 'NA' : (\n                      <TextField\n                        type=\"number\"\n                        size=\"small\"\n                        value={subj.practicalSecured}\n                        onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n                        sx={{ width: 70 }}\n                      />\n                    )}\n                  </TableCell>\n                  <TableCell>{subj.totalMax}</TableCell>\n                  <TableCell>{subj.totalMin}</TableCell>\n                  <TableCell>{totalSecured}</TableCell>\n                  <TableCell>{subj.result}</TableCell>\n                </TableRow>\n              );\n            })}\n            {/* Grand Total Row */}\n            <TableRow>\n              <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n              <TableCell><strong>{grandTotal}</strong></TableCell>\n              <TableCell><strong>T.M</strong></TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Aggregate Marks in Words */}\n      <Box sx={{ mt: 3 }}>\n        <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n      </Box>\n\n      {/* Date and Registrar */}\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n        <TextField\n          label=\"Dated\"\n          type=\"date\"\n          value={submissionDate}\n          onChange={(e) => setSubmissionDate(e.target.value)}\n          InputLabelProps={{ shrink: true }}\n        />\n        <Typography variant=\"subtitle1\" sx={{ alignSelf: 'center' }}><strong>EXECUTIVE REGISTRAR</strong></Typography>\n      </Box>\n\n      {/* Submit Button */}\n      <Box sx={{ mt: 3 }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FormComponent3;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}