{"ast":null,"code":"// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper, Button\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [submissionDate, setSubmissionDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value || updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n//     setSubjects(updated);\n//   };\n\n//   const handleSubmit = () => {\n//     console.log({\n//       rollNumber, name, sod, examDate, submissionDate,\n//       subjects, grandTotal, totalInWords\n//     });\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             {/* Grand Total Row */}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Aggregate Marks in Words */}\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       {/* Date and Registrar */}\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <TextField\n//           label=\"Dated\"\n//           type=\"date\"\n//           value={submissionDate}\n//           onChange={(e) => setSubmissionDate(e.target.value)}\n//           InputLabelProps={{ shrink: true }}\n//         />\n//         <Typography variant=\"subtitle1\" sx={{ alignSelf: 'center' }}><strong>EXECUTIVE REGISTRAR</strong></Typography>\n//       </Box>\n\n//       {/* Submit Button */}\n//       <Box sx={{ mt: 3 }}>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\n// import React, { useEffect, useState } from 'react';\n// import {\n//   Box, Typography, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name] = useState('John Doe');\n//   const [sod] = useState('Richard Doe');\n//   const [rollNumber] = useState('BPT12345');\n//   const [examDate] = useState('June 2025');\n//   const [submissionDate] = useState('2025-06-24');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <Typography><strong>{idLabel}:</strong> {rollNumber}</Typography>\n//       <Typography><strong>Name:</strong> {name}</Typography>\n//       <Typography><strong>S/o. / D/o.:</strong> {sod}</Typography>\n//       <Typography><strong>Month & Year of Exam:</strong> {examDate}</Typography>\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell  >Subject</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell >Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell />\n//               <TableCell  >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell  >Sec</TableCell>\n//               <TableCell  >Max</TableCell>\n//               <TableCell  >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>{subj.theorySecured || 0}</TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>{subj.practicalMax === 'NA' ? 'NA' : subj.practicalSecured || 0}</TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result || '-'}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <Typography><strong>Dated:</strong> {submissionDate}</Typography>\n\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;","map":{"version":3,"names":[],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/components/FormComponent3.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n    \n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper, Button\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [submissionDate, setSubmissionDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value || updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n//     setSubjects(updated);\n//   };\n\n//   const handleSubmit = () => {\n//     console.log({\n//       rollNumber, name, sod, examDate, submissionDate,\n//       subjects, grandTotal, totalInWords\n//     });\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             {/* Grand Total Row */}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Aggregate Marks in Words */}\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       {/* Date and Registrar */}\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <TextField\n//           label=\"Dated\"\n//           type=\"date\"\n//           value={submissionDate}\n//           onChange={(e) => setSubmissionDate(e.target.value)}\n//           InputLabelProps={{ shrink: true }}\n//         />\n//         <Typography variant=\"subtitle1\" sx={{ alignSelf: 'center' }}><strong>EXECUTIVE REGISTRAR</strong></Typography>\n//       </Box>\n\n//       {/* Submit Button */}\n//       <Box sx={{ mt: 3 }}>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\n\n// import React, { useEffect, useState } from 'react';\n// import {\n//   Box, Typography, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name] = useState('John Doe');\n//   const [sod] = useState('Richard Doe');\n//   const [rollNumber] = useState('BPT12345');\n//   const [examDate] = useState('June 2025');\n//   const [submissionDate] = useState('2025-06-24');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <Typography><strong>{idLabel}:</strong> {rollNumber}</Typography>\n//       <Typography><strong>Name:</strong> {name}</Typography>\n//       <Typography><strong>S/o. / D/o.:</strong> {sod}</Typography>\n//       <Typography><strong>Month & Year of Exam:</strong> {examDate}</Typography>\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell  >Subject</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell >Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell />\n//               <TableCell  >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell  >Sec</TableCell>\n//               <TableCell  >Max</TableCell>\n//               <TableCell  >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>{subj.theorySecured || 0}</TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>{subj.practicalMax === 'NA' ? 'NA' : subj.practicalSecured || 0}</TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result || '-'}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <Typography><strong>Dated:</strong> {submissionDate}</Typography>\n    \n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}