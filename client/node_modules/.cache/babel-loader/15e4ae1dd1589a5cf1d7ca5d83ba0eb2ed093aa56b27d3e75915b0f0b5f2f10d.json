{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/components/FormComponent3.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper, Button\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [submissionDate, setSubmissionDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value || updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n//     setSubjects(updated);\n//   };\n\n//   const handleSubmit = () => {\n//     console.log({\n//       rollNumber, name, sod, examDate, submissionDate,\n//       subjects, grandTotal, totalInWords\n//     });\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             {/* Grand Total Row */}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Aggregate Marks in Words */}\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       {/* Date and Registrar */}\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <TextField\n//           label=\"Dated\"\n//           type=\"date\"\n//           value={submissionDate}\n//           onChange={(e) => setSubmissionDate(e.target.value)}\n//           InputLabelProps={{ shrink: true }}\n//         />\n//         <Typography variant=\"subtitle1\" sx={{ alignSelf: 'center' }}><strong>EXECUTIVE REGISTRAR</strong></Typography>\n//       </Box>\n\n//       {/* Submit Button */}\n//       <Box sx={{ mt: 3 }}>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\n// import React, { useEffect, useState } from 'react';\n// import {\n//   Box, Typography, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name] = useState('John Doe');\n//   const [sod] = useState('Richard Doe');\n//   const [rollNumber] = useState('BPT12345');\n//   const [examDate] = useState('June 2025');\n//   const [submissionDate] = useState('2025-06-24');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <Typography><strong>{idLabel}:</strong> {rollNumber}</Typography>\n//       <Typography><strong>Name:</strong> {name}</Typography>\n//       <Typography><strong>S/o. / D/o.:</strong> {sod}</Typography>\n//       <Typography><strong>Month & Year of Exam:</strong> {examDate}</Typography>\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell  >Subject</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell >Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell />\n//               <TableCell  >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell  >Sec</TableCell>\n//               <TableCell  >Max</TableCell>\n//               <TableCell  >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>{subj.theorySecured || 0}</TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>{subj.practicalMax === 'NA' ? 'NA' : subj.practicalSecured || 0}</TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result || '-'}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <Typography><strong>Dated:</strong> {submissionDate}</Typography>\n\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\nimport React, { useState } from 'react';\nimport { Box, Typography, Table, TableHead, TableRow, TableCell, TableBody, Paper, TableContainer, Divider } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormComponentAnesthesia = () => {\n  _s();\n  const [name] = useState('John Doe');\n  const [sod] = useState('Richard Doe');\n  const [rollNumber] = useState('BPT12345');\n  const [examDate] = useState('June 2025');\n  const [submissionDate] = useState('2025-06-24');\n  const totalMaxMarks = subjectsData.reduce((sum, s) => sum + s.maxMarks, 0);\n  const totalMinMarks = subjectsData.reduce((sum, s) => sum + s.minMarks, 0);\n  const totalSecuredMarks = subjectsData.reduce((sum, s) => sum + s.marksSecured, 0);\n  const overallResult = subjectsData.every(subject => subject.marksSecured >= subject.minMarks) ? 'Pass' : 'Fail';\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Anesthesia Marks Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 21\n        }, this), \" \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"S/o or D/o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 21\n        }, this), \" \", sod]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Roll Number:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 21\n        }, this), \" \", rollNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Examination Held In:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 21\n        }, this), \" \", examDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Date of Submission:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 21\n        }, this), \" \", submissionDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        mb: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              backgroundColor: '#eeeeee'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Paper\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Subject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Max Marks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Min Marks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Marks Secured\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              children: \"Result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [subjectsData.map((subject, index) => {\n            const result = subject.marksSecured >= subject.minMarks ? 'Pass' : 'Fail';\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: subject.subject\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: subject.maxMarks\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: subject.minMarks\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: subject.marksSecured\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: result\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              backgroundColor: '#f0f0f0'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 2,\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 584,\n                columnNumber: 38\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: totalMaxMarks\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 40\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: totalMinMarks\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 40\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: totalSecuredMarks\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 40\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: overallResult\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 588,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n};\n_s(FormComponentAnesthesia, \"dAdOn3sbqxvC6tosAttR9qk1H2o=\");\n_c = FormComponentAnesthesia;\nexport default FormComponentAnesthesia;\nvar _c;\n$RefreshReg$(_c, \"FormComponentAnesthesia\");","map":{"version":3,"names":["React","useState","Box","Typography","Table","TableHead","TableRow","TableCell","TableBody","Paper","TableContainer","Divider","jsxDEV","_jsxDEV","FormComponentAnesthesia","_s","name","sod","rollNumber","examDate","submissionDate","totalMaxMarks","subjectsData","reduce","sum","s","maxMarks","totalMinMarks","minMarks","totalSecuredMarks","marksSecured","overallResult","every","subject","sx","p","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","mb","component","backgroundColor","align","map","index","result","colSpan","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/components/FormComponent3.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import {\n// //   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n// //   TableHead, TableRow, Paper\n// // } from '@mui/material';\n\n// // const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n// //   const [name, setName] = useState('');\n// //   const [sod, setSod] = useState('');\n// //   const [rollNumber, setRollNumber] = useState('');\n// //   const [examDate, setExamDate] = useState('');\n// //   const [subjects, setSubjects] = useState(subjectsData);\n\n// //   const handleMarksChange = (index, field, value) => {\n// //     const updated = [...subjects];\n// //     updated[index][field] = value;\n\n// //     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n// //     const practicalPass = !value || updated[index].practicalMax === 'NA' || Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n    \n// //     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n\n// //     setSubjects(updated);\n// //   };\n\n// //   return (\n// //     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n// //       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n// //       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n// //       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n// //       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n// //       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n// //       <TableContainer component={Paper} sx={{ mt: 3 }}>\n// //         <Table>\n// //           <TableHead>\n// //             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n// //               <TableCell>Subject</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n// //               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n// //               <TableCell>Result</TableCell>\n// //             </TableRow>\n// //             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n// //               <TableCell />\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell>Max</TableCell>\n// //               <TableCell>Min</TableCell>\n// //               <TableCell>Sec</TableCell>\n// //               <TableCell />\n// //             </TableRow>\n// //           </TableHead>\n// //           <TableBody>\n// //             {subjects.map((subj, index) => (\n// //               <TableRow key={index}>\n// //                 <TableCell>{subj.name}</TableCell>\n// //                 <TableCell>{subj.theoryMax}</TableCell>\n// //                 <TableCell>{subj.theoryMin}</TableCell>\n// //                 <TableCell>\n// //                   <TextField\n// //                     type=\"number\"\n// //                     size=\"small\"\n// //                     value={subj.theorySecured}\n// //                     onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n// //                     sx={{ width: 70 }}\n// //                   />\n// //                 </TableCell>\n// //                 <TableCell>{subj.practicalMax}</TableCell>\n// //                 <TableCell>{subj.practicalMin}</TableCell>\n// //                 <TableCell>\n// //                   {subj.practicalMax === 'NA' ? 'NA' : (\n// //                     <TextField\n// //                       type=\"number\"\n// //                       size=\"small\"\n// //                       value={subj.practicalSecured}\n// //                       onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n// //                       sx={{ width: 70 }}\n// //                     />\n// //                   )}\n// //                 </TableCell>\n// //                 <TableCell>{subj.totalMax}</TableCell>\n// //                 <TableCell>{subj.totalMin}</TableCell>\n// //                 <TableCell>\n// //                   {\n// //                     subj.practicalMax === 'NA'\n// //                       ? subj.theorySecured\n// //                       : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0)\n// //                   }\n// //                 </TableCell>\n// //                 <TableCell>{subj.result}</TableCell>\n// //               </TableRow>\n// //             ))}\n// //           </TableBody>\n// //         </Table>\n// //       </TableContainer>\n// //     </Box>\n// //   );\n// // };\n\n// // export default FormComponent3;\n\n\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell, TableContainer,\n//   TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [totalSecured, setTotalSecured] = useState(0);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value ||\n//       updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = theoryPass && practicalPass ? 'Pass' : 'Fail';\n\n//     setSubjects(updated);\n//   };\n\n//   // Calculate total secured marks\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical =\n//         subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setTotalSecured(total);\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField\n//         label=\"Month & Year of Exam\"\n//         type=\"month\"\n//         fullWidth\n//         margin=\"normal\"\n//         value={examDate}\n//         onChange={(e) => setExamDate(e.target.value)}\n//       />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecuredPerSubject =\n//                 subj.practicalMax === 'NA'\n//                   ? Number(subj.theorySecured || 0)\n//                   : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecuredPerSubject}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography variant=\"h6\">\n//           Total Secured Marks: {totalSecured}\n//         </Typography>\n//         <Typography variant=\"subtitle1\" sx={{ fontStyle: 'italic' }}>\n//           In Words: {toWords(totalSecured)} only\n//         </Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n// import React, { useState, useEffect } from 'react';\n// import {\n//   Box, Typography, TextField, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper, Button\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name, setName] = useState('');\n//   const [sod, setSod] = useState('');\n//   const [rollNumber, setRollNumber] = useState('');\n//   const [examDate, setExamDate] = useState('');\n//   const [submissionDate, setSubmissionDate] = useState('');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   const handleMarksChange = (index, field, value) => {\n//     const updated = [...subjects];\n//     updated[index][field] = value;\n\n//     const theoryPass = !value || Number(updated[index].theorySecured) >= updated[index].theoryMin;\n//     const practicalPass =\n//       !value || updated[index].practicalMax === 'NA' ||\n//       Number(updated[index].practicalSecured) >= updated[index].practicalMin;\n\n//     updated[index].result = (theoryPass && practicalPass) ? 'Pass' : 'Fail';\n//     setSubjects(updated);\n//   };\n\n//   const handleSubmit = () => {\n//     console.log({\n//       rollNumber, name, sod, examDate, submissionDate,\n//       subjects, grandTotal, totalInWords\n//     });\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <TextField label={idLabel} fullWidth margin=\"normal\" value={rollNumber} onChange={(e) => setRollNumber(e.target.value)} />\n//       <TextField label=\"Name\" fullWidth margin=\"normal\" value={name} onChange={(e) => setName(e.target.value)} />\n//       <TextField label=\"S/o. / D/o.\" fullWidth margin=\"normal\" value={sod} onChange={(e) => setSod(e.target.value)} />\n//       <TextField label=\"Month & Year of Exam\" fullWidth margin=\"normal\" value={examDate} onChange={(e) => setExamDate(e.target.value)} />\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n//               <TableCell>Subject</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell>Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '#f9f9f9' }}>\n//               <TableCell />\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell>Max</TableCell>\n//               <TableCell>Min</TableCell>\n//               <TableCell>Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>\n//                     <TextField\n//                       type=\"number\"\n//                       size=\"small\"\n//                       value={subj.theorySecured}\n//                       onChange={(e) => handleMarksChange(index, 'theorySecured', e.target.value)}\n//                       sx={{ width: 70 }}\n//                     />\n//                   </TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>\n//                     {subj.practicalMax === 'NA' ? 'NA' : (\n//                       <TextField\n//                         type=\"number\"\n//                         size=\"small\"\n//                         value={subj.practicalSecured}\n//                         onChange={(e) => handleMarksChange(index, 'practicalSecured', e.target.value)}\n//                         sx={{ width: 70 }}\n//                       />\n//                     )}\n//                   </TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             {/* Grand Total Row */}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Aggregate Marks in Words */}\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       {/* Date and Registrar */}\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <TextField\n//           label=\"Dated\"\n//           type=\"date\"\n//           value={submissionDate}\n//           onChange={(e) => setSubmissionDate(e.target.value)}\n//           InputLabelProps={{ shrink: true }}\n//         />\n//         <Typography variant=\"subtitle1\" sx={{ alignSelf: 'center' }}><strong>EXECUTIVE REGISTRAR</strong></Typography>\n//       </Box>\n\n//       {/* Submit Button */}\n//       <Box sx={{ mt: 3 }}>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\n\n// import React, { useEffect, useState } from 'react';\n// import {\n//   Box, Typography, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, Paper\n// } from '@mui/material';\n// import { toWords } from 'number-to-words';\n\n// const FormComponent3 = ({ title, subjectsData, idLabel = 'Roll Number' }) => {\n//   const [name] = useState('John Doe');\n//   const [sod] = useState('Richard Doe');\n//   const [rollNumber] = useState('BPT12345');\n//   const [examDate] = useState('June 2025');\n//   const [submissionDate] = useState('2025-06-24');\n//   const [subjects, setSubjects] = useState(subjectsData);\n//   const [grandTotal, setGrandTotal] = useState(0);\n//   const [totalInWords, setTotalInWords] = useState('');\n\n//   useEffect(() => {\n//     const total = subjects.reduce((acc, subj) => {\n//       const theory = Number(subj.theorySecured || 0);\n//       const practical = subj.practicalMax === 'NA' ? 0 : Number(subj.practicalSecured || 0);\n//       return acc + theory + practical;\n//     }, 0);\n//     setGrandTotal(total);\n//     setTotalInWords(toWords(total));\n//   }, [subjects]);\n\n//   return (\n//     <Box sx={{ p: 3, maxWidth: 1000, mx: 'auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n\n//       <Typography><strong>{idLabel}:</strong> {rollNumber}</Typography>\n//       <Typography><strong>Name:</strong> {name}</Typography>\n//       <Typography><strong>S/o. / D/o.:</strong> {sod}</Typography>\n//       <Typography><strong>Month & Year of Exam:</strong> {examDate}</Typography>\n\n//       <TableContainer component={Paper} sx={{ mt: 3 }}>\n//         <Table>\n//           <TableHead>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell  >Subject</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Theory</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Practical / Viva</TableCell>\n//               <TableCell  align=\"center\" colSpan={3}>Total</TableCell>\n//               <TableCell >Result</TableCell>\n//             </TableRow>\n//             <TableRow sx={{ backgroundColor: '\t#dddddd' }}>\n//               <TableCell />\n//               <TableCell  >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell  >Sec</TableCell>\n//               <TableCell  >Max</TableCell>\n//               <TableCell  >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell >Max</TableCell>\n//               <TableCell >Min</TableCell>\n//               <TableCell >Sec</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {subjects.map((subj, index) => {\n//               const totalSecured = subj.practicalMax === 'NA'\n//                 ? Number(subj.theorySecured || 0)\n//                 : Number(subj.theorySecured || 0) + Number(subj.practicalSecured || 0);\n\n//               return (\n//                 <TableRow key={index}>\n//                   <TableCell>{subj.name}</TableCell>\n//                   <TableCell>{subj.theoryMax}</TableCell>\n//                   <TableCell>{subj.theoryMin}</TableCell>\n//                   <TableCell>{subj.theorySecured || 0}</TableCell>\n//                   <TableCell>{subj.practicalMax}</TableCell>\n//                   <TableCell>{subj.practicalMin}</TableCell>\n//                   <TableCell>{subj.practicalMax === 'NA' ? 'NA' : subj.practicalSecured || 0}</TableCell>\n//                   <TableCell>{subj.totalMax}</TableCell>\n//                   <TableCell>{subj.totalMin}</TableCell>\n//                   <TableCell>{totalSecured}</TableCell>\n//                   <TableCell>{subj.result || '-'}</TableCell>\n//                 </TableRow>\n//               );\n//             })}\n//             <TableRow>\n//               <TableCell colSpan={9} align=\"right\"><strong>Grand Total:</strong></TableCell>\n//               <TableCell><strong>{grandTotal}</strong></TableCell>\n//               <TableCell><strong>T.M</strong></TableCell>\n//             </TableRow>\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       <Box sx={{ mt: 3 }}>\n//         <Typography><strong>Aggregate marks (in words):</strong> {totalInWords.toUpperCase()}</Typography>\n//       </Box>\n\n//       <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\n//         <Typography><strong>Dated:</strong> {submissionDate}</Typography>\n    \n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent3;\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Paper,\n  TableContainer,\n  Divider\n} from '@mui/material';\n\nconst FormComponentAnesthesia = () => {\n  const [name] = useState('John Doe');\n  const [sod] = useState('Richard Doe');\n  const [rollNumber] = useState('BPT12345');\n  const [examDate] = useState('June 2025');\n  const [submissionDate] = useState('2025-06-24');\n\n  const totalMaxMarks = subjectsData.reduce((sum, s) => sum + s.maxMarks, 0);\n  const totalMinMarks = subjectsData.reduce((sum, s) => sum + s.minMarks, 0);\n  const totalSecuredMarks = subjectsData.reduce((sum, s) => sum + s.marksSecured, 0);\n\n  const overallResult = subjectsData.every(subject => subject.marksSecured >= subject.minMarks)\n    ? 'Pass'\n    : 'Fail';\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Anesthesia Marks Report\n      </Typography>\n\n      <Box sx={{ mb: 2 }}>\n        <Typography><strong>Name:</strong> {name}</Typography>\n        <Typography><strong>S/o or D/o:</strong> {sod}</Typography>\n        <Typography><strong>Roll Number:</strong> {rollNumber}</Typography>\n        <Typography><strong>Examination Held In:</strong> {examDate}</Typography>\n        <Typography><strong>Date of Submission:</strong> {submissionDate}</Typography>\n      </Box>\n\n      <Divider sx={{ mb: 2 }} />\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow sx={{ backgroundColor: '#eeeeee' }}>\n              <TableCell>Paper</TableCell>\n              <TableCell>Subject</TableCell>\n              <TableCell align=\"right\">Max Marks</TableCell>\n              <TableCell align=\"right\">Min Marks</TableCell>\n              <TableCell align=\"right\">Marks Secured</TableCell>\n              <TableCell align=\"center\">Result</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {subjectsData.map((subject, index) => {\n              const result = subject.marksSecured >= subject.minMarks ? 'Pass' : 'Fail';\n              return (\n                <TableRow key={index}>\n                  <TableCell>{index + 1}</TableCell>\n                  <TableCell>{subject.subject}</TableCell>\n                  <TableCell align=\"right\">{subject.maxMarks}</TableCell>\n                  <TableCell align=\"right\">{subject.minMarks}</TableCell>\n                  <TableCell align=\"right\">{subject.marksSecured}</TableCell>\n                  <TableCell align=\"center\">{result}</TableCell>\n                </TableRow>\n              );\n            })}\n\n            <TableRow sx={{ backgroundColor: '#f0f0f0' }}>\n              <TableCell colSpan={2}><strong>Total</strong></TableCell>\n              <TableCell align=\"right\"><strong>{totalMaxMarks}</strong></TableCell>\n              <TableCell align=\"right\"><strong>{totalMinMarks}</strong></TableCell>\n              <TableCell align=\"right\"><strong>{totalSecuredMarks}</strong></TableCell>\n              <TableCell align=\"center\"><strong>{overallResult}</strong></TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n};\n\nexport default FormComponentAnesthesia;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}