{"ast":null,"code":"var _jsxFileName = \"/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicalPgMedicalStudents/FormComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const inlineStyles = {\n//   container: { borderRadius: '8px', width: '100%', maxWidth: '800px', margin: '0 auto' },\n//   field: { marginBottom: '18px' },\n//   label: { display: 'block', marginBottom: '5px', fontWeight: 'bold' },\n//   input: { padding: '10px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   textarea: { padding: '8px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   radioGroup: { display: 'flex', gap: '20px', marginTop: '5px' },\n//   button: {\n//     padding: '10px 20px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     backgroundColor: '#4b1d77',\n//     color: '#ffffff',\n//     cursor: 'pointer',\n//     fontSize: '15px',\n//     fontWeight: 500\n//   }\n// };\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const navigate = useNavigate();\n\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n//   const [previewMode, setPreviewMode] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handlePreview = (e) => {\n//     e.preventDefault();\n//     setPreviewMode(true);\n//   };\n\n//   const handleEdit = () => {\n//     setPreviewMode(false);\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   return (\n//     <div style={inlineStyles.container}>\n//       <h2>{formTitle}</h2>\n\n//       {!previewMode ? (\n//         <form onSubmit={handlePreview}>\n//           {fields.map((field, index) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <h2 key={`heading-${index}`} style={{ margin: '20px 0', color: '#4b1d77' }}>\n//                   {field.text}\n//                 </h2>\n//               );\n//             }\n\n//             return (\n//               <div key={field.name} style={inlineStyles.field}>\n//                 <label style={inlineStyles.label}>{field.label}</label>\n\n//                 {field.type === 'text' && (\n//                   <input\n//                     type=\"text\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n\n//                 {field.type === 'textarea' && (\n//                   <textarea\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     rows=\"4\"\n//                     style={inlineStyles.textarea}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'date' && (\n//                   <input\n//                     type=\"date\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'radio' && (\n//                   <div style={inlineStyles.radioGroup}>\n//                     {field.options.map((opt) => (\n//                       <label key={opt}>\n//                         <input\n//                           type=\"radio\"\n//                           name={field.name}\n//                           value={opt}\n//                           checked={formData[field.name] === opt}\n//                           onChange={handleChange}\n//                           required={field.required}\n//                         />{' '}\n//                         {opt}\n//                       </label>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n\n//           <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n//             <button type=\"submit\" style={inlineStyles.button}>Preview</button>\n//           </div>\n//         </form>\n//       ) : (\n//         <>\n//           <div style={{ padding: '20px', backgroundColor: '#f8f8f8', borderRadius: '8px' }}>\n//             <h3>Preview</h3>\n//             {fields.map((field) => (\n//               shouldDisplayField(field) && field.type !== 'heading' && (\n//                 <div key={field.name} style={{ marginBottom: '12px' }}>\n//                   <strong>{field.label}:</strong> {formData[field.name]}\n//                 </div>\n//               )\n//             ))}\n//           </div>\n//           <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"40px\", marginTop: \"20px\" }}>\n//             <button onClick={handleEdit} style={{ ...inlineStyles.button, backgroundColor: '#6c757d' }}>Edit</button>\n//             <button onClick={() => alert(\"Form submitted!\")} style={inlineStyles.button}>Submit</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;\n\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <Box key={field.text} sx={{ width: '100%', mt: 2, mb: 1 }}>\n//                   <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#ccc' }}>\n//                     {field.text}\n//                   </Typography>\n//                 </Box>\n//               );\n//             }\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel, MenuItem } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <Box key={field.text} sx={{ width: '100%', mt: 2, mb: 1 }}>\n//                   <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#ccc' }}>\n//                     {field.text}\n//                   </Typography>\n//                 </Box>\n//               );\n//             }\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'select':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     select\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   >\n//                     <MenuItem value=\"\">Select</MenuItem>\n//                     {field.options.map(opt => (\n//                       <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n//                     ))}\n//                   </TextField>\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;\n// adjust path as needed\n\nimport React, { useState } from 'react';\nimport { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel, MenuItem } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormComponent = ({\n  formTitle,\n  fields,\n  nextRoute,\n  formName\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const initialState = fields.reduce((acc, field) => {\n    acc[field.name] = '';\n    return acc;\n  }, {});\n  const [formData, setFormData] = useState(initialState);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const shouldDisplayField = field => {\n    if (!field.conditional) return true;\n    const {\n      field: dependency,\n      value\n    } = field.conditional;\n    return formData[dependency] === value;\n  };\n  const validate = () => {\n    for (const field of fields) {\n      if (field.required && !formData[field.name]) {\n        alert(`Please fill out the required field: ${field.label}`);\n        return false;\n      }\n    }\n    return true;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (validate()) {\n      console.log('Form data:', formData);\n      alert('Form submitted!');\n      if (nextRoute) {\n        navigate(nextRoute);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 14,\n      border: '1px solid #ccc',\n      borderRadius: 2,\n      maxWidth: '1100px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: formTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 2,\n          mb: 3\n        },\n        children: fields.map(field => {\n          if (!shouldDisplayField(field)) return null;\n          if (field.type === 'heading') {\n            return /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%',\n                mt: 2,\n                mb: 1\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                sx: {\n                  fontWeight: 'bold',\n                  color: '#000000'\n                },\n                children: field.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 19\n              }, this)\n            }, field.text, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 17\n            }, this);\n          }\n          switch (field.type) {\n            case 'text':\n            case 'date':\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                type: field.type,\n                label: field.label,\n                name: field.name,\n                value: formData[field.name],\n                onChange: handleChange,\n                size: \"small\",\n                fullWidth: true,\n                required: field.required,\n                InputLabelProps: field.type === 'date' ? {\n                  shrink: true\n                } : {}\n              }, field.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 19\n              }, this);\n            case 'select':\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                select: true,\n                label: field.label,\n                name: field.name,\n                value: formData[field.name],\n                onChange: handleChange,\n                size: \"small\",\n                fullWidth: true,\n                required: field.required,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 637,\n                  columnNumber: 21\n                }, this), field.options.map(opt => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: opt,\n                  children: opt\n                }, opt, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 23\n                }, this))]\n              }, field.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 19\n              }, this);\n            case 'textarea':\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                label: field.label,\n                name: field.name,\n                multiline: true,\n                rows: 4,\n                value: formData[field.name],\n                onChange: handleChange,\n                size: \"small\",\n                fullWidth: true,\n                required: field.required\n              }, field.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 19\n              }, this);\n            case 'radio':\n              return /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mb: 2,\n                  width: '100%'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  children: field.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 663,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n                  row: true,\n                  name: field.name,\n                  value: formData[field.name],\n                  onChange: handleChange,\n                  children: field.options.map(opt => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    value: opt,\n                    control: /*#__PURE__*/_jsxDEV(Radio, {\n                      required: field.required\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 674,\n                      columnNumber: 36\n                    }, this),\n                    label: opt\n                  }, opt, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 671,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 664,\n                  columnNumber: 21\n                }, this)]\n              }, field.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 19\n              }, this);\n            default:\n              return null;\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'right'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          children: nextRoute ? 'Next' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 588,\n    columnNumber: 5\n  }, this);\n};\n_s(FormComponent, \"mSgV5PqTf3E3x73xMzeZIQ3MqRw=\", false, function () {\n  return [useNavigate];\n});\n_c = FormComponent;\nexport default FormComponent;\nvar _c;\n$RefreshReg$(_c, \"FormComponent\");","map":{"version":3,"names":["React","useState","Box","TextField","Typography","Button","Radio","RadioGroup","FormControlLabel","MenuItem","useNavigate","jsxDEV","_jsxDEV","FormComponent","formTitle","fields","nextRoute","formName","_s","navigate","initialState","reduce","acc","field","name","formData","setFormData","handleChange","e","value","target","prev","shouldDisplayField","conditional","dependency","validate","required","alert","label","handleSubmit","preventDefault","console","log","sx","p","border","borderRadius","maxWidth","margin","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","display","flexWrap","gap","mb","map","type","width","mt","fontWeight","color","text","onChange","size","fullWidth","InputLabelProps","shrink","select","options","opt","multiline","rows","row","control","textAlign","_c","$RefreshReg$"],"sources":["/home/kranthi/Desktop/student_lifecycle/client/src/Forms/ApplicalPgMedicalStudents/FormComponent.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const inlineStyles = {\n//   container: { borderRadius: '8px', width: '100%', maxWidth: '800px', margin: '0 auto' },\n//   field: { marginBottom: '18px' },\n//   label: { display: 'block', marginBottom: '5px', fontWeight: 'bold' },\n//   input: { padding: '10px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   textarea: { padding: '8px', width: '100%', borderRadius: '4px', border: '1px solid #ccc' },\n//   radioGroup: { display: 'flex', gap: '20px', marginTop: '5px' },\n//   button: {\n//     padding: '10px 20px',\n//     border: 'none',\n//     borderRadius: '4px',\n//     backgroundColor: '#4b1d77',\n//     color: '#ffffff',\n//     cursor: 'pointer',\n//     fontSize: '15px',\n//     fontWeight: 500\n//   }\n// };\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const navigate = useNavigate();\n\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n//   const [previewMode, setPreviewMode] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handlePreview = (e) => {\n//     e.preventDefault();\n//     setPreviewMode(true);\n//   };\n\n//   const handleEdit = () => {\n//     setPreviewMode(false);\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   return (\n//     <div style={inlineStyles.container}>\n//       <h2>{formTitle}</h2>\n\n//       {!previewMode ? (\n//         <form onSubmit={handlePreview}>\n//           {fields.map((field, index) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <h2 key={`heading-${index}`} style={{ margin: '20px 0', color: '#4b1d77' }}>\n//                   {field.text}\n//                 </h2>\n//               );\n//             }\n\n//             return (\n//               <div key={field.name} style={inlineStyles.field}>\n//                 <label style={inlineStyles.label}>{field.label}</label>\n\n//                 {field.type === 'text' && (\n//                   <input\n//                     type=\"text\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n\n//                 {field.type === 'textarea' && (\n//                   <textarea\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     rows=\"4\"\n//                     style={inlineStyles.textarea}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'date' && (\n//                   <input\n//                     type=\"date\"\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   />\n//                 )}\n\n//                 {field.type === 'radio' && (\n//                   <div style={inlineStyles.radioGroup}>\n//                     {field.options.map((opt) => (\n//                       <label key={opt}>\n//                         <input\n//                           type=\"radio\"\n//                           name={field.name}\n//                           value={opt}\n//                           checked={formData[field.name] === opt}\n//                           onChange={handleChange}\n//                           required={field.required}\n//                         />{' '}\n//                         {opt}\n//                       </label>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           })}\n\n//           <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n//             <button type=\"submit\" style={inlineStyles.button}>Preview</button>\n//           </div>\n//         </form>\n//       ) : (\n//         <>\n//           <div style={{ padding: '20px', backgroundColor: '#f8f8f8', borderRadius: '8px' }}>\n//             <h3>Preview</h3>\n//             {fields.map((field) => (\n//               shouldDisplayField(field) && field.type !== 'heading' && (\n//                 <div key={field.name} style={{ marginBottom: '12px' }}>\n//                   <strong>{field.label}:</strong> {formData[field.name]}\n//                 </div>\n//               )\n//             ))}\n//           </div>\n//           <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"40px\", marginTop: \"20px\" }}>\n//             <button onClick={handleEdit} style={{ ...inlineStyles.button, backgroundColor: '#6c757d' }}>Edit</button>\n//             <button onClick={() => alert(\"Form submitted!\")} style={inlineStyles.button}>Submit</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n  \n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;\n\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n  \n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <Box key={field.text} sx={{ width: '100%', mt: 2, mb: 1 }}>\n//                   <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#ccc' }}>\n//                     {field.text}\n//                   </Typography>\n//                 </Box>\n//               );\n//             }\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//                 {field.type === 'select' && (\n//                   <select\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     style={inlineStyles.input}\n//                     required={field.required}\n//                   >\n//                     <option value=\"\">Select</option>\n//                     {field.options.map((opt) => (\n//                       <option key={opt} value={opt}>{opt}</option>\n//                     ))}\n//                   </select>\n//                 )}\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// // export default FormComponent;\n// import React, { useState } from 'react';\n// import { Box, TextField, Typography, Button, Radio, RadioGroup, FormControlLabel, MenuItem } from '@mui/material';\n\n// const FormComponent = ({ formTitle, fields }) => {\n//   const initialState = fields.reduce((acc, field) => {\n//     acc[field.name] = '';\n//     return acc;\n//   }, {});\n\n//   const [formData, setFormData] = useState(initialState);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const shouldDisplayField = (field) => {\n//     if (!field.conditional) return true;\n//     const { field: dependency, value } = field.conditional;\n//     return formData[dependency] === value;\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n//     alert('Form submitted!');\n//   };\n\n//   return (\n//     <Box sx={{ p: 10, border: '1px solid #ccc', borderRadius: 2, maxWidth: '800px', margin: '0 auto' }}>\n//       <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n//       <form onSubmit={handleSubmit}>\n//         <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n//           {fields.map((field) => {\n//             if (!shouldDisplayField(field)) return null;\n\n//             if (field.type === 'heading') {\n//               return (\n//                 <Box key={field.text} sx={{ width: '100%', mt: 2, mb: 1 }}>\n//                   <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#ccc' }}>\n//                     {field.text}\n//                   </Typography>\n//                 </Box>\n//               );\n//             }\n\n//             switch (field.type) {\n//               case 'text':\n//               case 'date':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     type={field.type}\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                     InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n//                   />\n//                 );\n\n//               case 'select':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     select\n//                     label={field.label}\n//                     name={field.name}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   >\n//                     <MenuItem value=\"\">Select</MenuItem>\n//                     {field.options.map(opt => (\n//                       <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n//                     ))}\n//                   </TextField>\n//                 );\n\n//               case 'textarea':\n//                 return (\n//                   <TextField\n//                     key={field.name}\n//                     label={field.label}\n//                     name={field.name}\n//                     multiline\n//                     rows={4}\n//                     value={formData[field.name]}\n//                     onChange={handleChange}\n//                     size=\"small\"\n//                     fullWidth\n//                     required={field.required}\n//                   />\n//                 );\n\n//               case 'radio':\n//                 return (\n//                   <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n//                     <Typography>{field.label}</Typography>\n//                     <RadioGroup\n//                       row\n//                       name={field.name}\n//                       value={formData[field.name]}\n//                       onChange={handleChange}\n//                     >\n//                       {field.options.map(opt => (\n//                         <FormControlLabel key={opt} value={opt} control={<Radio required={field.required} />} label={opt} />\n//                       ))}\n//                     </RadioGroup>\n//                   </Box>\n//                 );\n\n//               default:\n//                 return null;\n//             }\n//           })}\n//         </Box>\n\n//         <Box sx={{ textAlign: 'right' }}>\n//           <Button variant=\"contained\" type=\"submit\">Submit</Button>\n//         </Box>\n//       </form>\n//     </Box>\n//   );\n// };\n\n// export default FormComponent;\n // adjust path as needed\n\nimport React, { useState } from 'react';\nimport {\n  Box, TextField, Typography, Button, Radio, RadioGroup,\n  FormControlLabel, MenuItem\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\n\nconst FormComponent = ({ formTitle, fields, nextRoute,formName }) => {\n  const navigate = useNavigate();\n\n  const initialState = fields.reduce((acc, field) => {\n    acc[field.name] = '';\n    return acc;\n  }, {});\n\n  const [formData, setFormData] = useState(initialState);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const shouldDisplayField = (field) => {\n    if (!field.conditional) return true;\n    const { field: dependency, value } = field.conditional;\n    return formData[dependency] === value;\n  };\n  const validate = () => {\n    for (const field of fields) {\n      if (field.required && !formData[field.name]) {\n        alert(`Please fill out the required field: ${field.label}`);\n        return false;\n      }\n    }\n    return true;\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n  \n    if (validate()) {\n      console.log('Form data:', formData);\n      alert('Form submitted!');\n  \n      if (nextRoute) {\n        navigate(nextRoute); \n      }\n    }\n  };\n  \n  return (\n    <Box sx={{ p: 14, border: '1px solid #ccc', borderRadius: 2, maxWidth: '1100px', margin: '0 auto' }}>\n      <Typography variant=\"h6\" gutterBottom>{formTitle}</Typography>\n\n      <form onSubmit={handleSubmit}>\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\n          {fields.map((field) => {\n            if (!shouldDisplayField(field)) return null;\n\n            if (field.type === 'heading') {\n              return (\n                <Box key={field.text} sx={{ width: '100%', mt: 2, mb: 1 }}>\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#000000' }}>\n                    {field.text}\n                  </Typography>\n                </Box>\n              );\n            }\n\n            switch (field.type) {\n              case 'text':\n              case 'date':\n                return (\n                  <TextField\n                    key={field.name}\n                    type={field.type}\n                    label={field.label}\n                    name={field.name}\n                    value={formData[field.name]}\n                    onChange={handleChange}\n                    size=\"small\"\n                    fullWidth\n                    required={field.required}\n                    InputLabelProps={field.type === 'date' ? { shrink: true } : {}}\n                  />\n                );\n\n              case 'select':\n                return (\n                  <TextField\n                    key={field.name}\n                    select\n                    label={field.label}\n                    name={field.name}\n                    value={formData[field.name]}\n                    onChange={handleChange}\n                    size=\"small\"\n                    fullWidth\n                    required={field.required}\n                  >\n                    <MenuItem value=\"\">Select</MenuItem>\n                    {field.options.map(opt => (\n                      <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n                    ))}\n                  </TextField>\n                );\n\n              case 'textarea':\n                return (\n                  <TextField\n                    key={field.name}\n                    label={field.label}\n                    name={field.name}\n                    multiline\n                    rows={4}\n                    value={formData[field.name]}\n                    onChange={handleChange}\n                    size=\"small\"\n                    fullWidth\n                    required={field.required}\n                  />\n                );\n\n              case 'radio':\n                return (\n                  <Box key={field.name} sx={{ mb: 2, width: '100%' }}>\n                    <Typography>{field.label}</Typography>\n                    <RadioGroup\n                      row\n                      name={field.name}\n                      value={formData[field.name]}\n                      onChange={handleChange}\n                    >\n                      {field.options.map(opt => (\n                        <FormControlLabel\n                          key={opt}\n                          value={opt}\n                          control={<Radio required={field.required} />}\n                          label={opt}\n                        />\n                      ))}\n                    </RadioGroup>\n                  </Box>\n                );\n\n              default:\n                return null;\n            }\n          })}\n        </Box>\n\n        <Box sx={{ textAlign: 'right' }}>\n          <Button variant=\"contained\" type=\"submit\">\n            {nextRoute ? 'Next' : 'Submit'}\n          </Button>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n\nexport default FormComponent;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACC;;AAED,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,GAAG,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EACrDC,gBAAgB,EAAEC,QAAQ,QACrB,eAAe;AACtB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,aAAa,GAAGA,CAAC;EAAEC,SAAS;EAAEC,MAAM;EAAEC,SAAS;EAACC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnE,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,YAAY,GAAGL,MAAM,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;IACjDD,GAAG,CAACC,KAAK,CAACC,IAAI,CAAC,GAAG,EAAE;IACpB,OAAOF,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAACmB,YAAY,CAAC;EAEtD,MAAMO,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEJ,IAAI;MAAEK;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAChCJ,WAAW,CAACK,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACP,IAAI,GAAGK;IAAM,CAAC,CAAC,CAAC;EACnD,CAAC;EAED,MAAMG,kBAAkB,GAAIT,KAAK,IAAK;IACpC,IAAI,CAACA,KAAK,CAACU,WAAW,EAAE,OAAO,IAAI;IACnC,MAAM;MAAEV,KAAK,EAAEW,UAAU;MAAEL;IAAM,CAAC,GAAGN,KAAK,CAACU,WAAW;IACtD,OAAOR,QAAQ,CAACS,UAAU,CAAC,KAAKL,KAAK;EACvC,CAAC;EACD,MAAMM,QAAQ,GAAGA,CAAA,KAAM;IACrB,KAAK,MAAMZ,KAAK,IAAIR,MAAM,EAAE;MAC1B,IAAIQ,KAAK,CAACa,QAAQ,IAAI,CAACX,QAAQ,CAACF,KAAK,CAACC,IAAI,CAAC,EAAE;QAC3Ca,KAAK,CAAC,uCAAuCd,KAAK,CAACe,KAAK,EAAE,CAAC;QAC3D,OAAO,KAAK;MACd;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMC,YAAY,GAAIX,CAAC,IAAK;IAC1BA,CAAC,CAACY,cAAc,CAAC,CAAC;IAElB,IAAIL,QAAQ,CAAC,CAAC,EAAE;MACdM,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEjB,QAAQ,CAAC;MACnCY,KAAK,CAAC,iBAAiB,CAAC;MAExB,IAAIrB,SAAS,EAAE;QACbG,QAAQ,CAACH,SAAS,CAAC;MACrB;IACF;EACF,CAAC;EAED,oBACEJ,OAAA,CAACV,GAAG;IAACyC,EAAE,EAAE;MAAEC,CAAC,EAAE,EAAE;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAClGrC,OAAA,CAACR,UAAU;MAAC8C,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAEnC;IAAS;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eAE9D3C,OAAA;MAAM4C,QAAQ,EAAEjB,YAAa;MAAAU,QAAA,gBAC3BrC,OAAA,CAACV,GAAG;QAACyC,EAAE,EAAE;UAAEc,OAAO,EAAE,MAAM;UAAEC,QAAQ,EAAE,MAAM;UAAEC,GAAG,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAE;QAAAX,QAAA,EAC3DlC,MAAM,CAAC8C,GAAG,CAAEtC,KAAK,IAAK;UACrB,IAAI,CAACS,kBAAkB,CAACT,KAAK,CAAC,EAAE,OAAO,IAAI;UAE3C,IAAIA,KAAK,CAACuC,IAAI,KAAK,SAAS,EAAE;YAC5B,oBACElD,OAAA,CAACV,GAAG;cAAkByC,EAAE,EAAE;gBAAEoB,KAAK,EAAE,MAAM;gBAAEC,EAAE,EAAE,CAAC;gBAAEJ,EAAE,EAAE;cAAE,CAAE;cAAAX,QAAA,eACxDrC,OAAA,CAACR,UAAU;gBAAC8C,OAAO,EAAC,IAAI;gBAACP,EAAE,EAAE;kBAAEsB,UAAU,EAAE,MAAM;kBAAEC,KAAK,EAAE;gBAAU,CAAE;gBAAAjB,QAAA,EACnE1B,KAAK,CAAC4C;cAAI;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACD;YAAC,GAHLhC,KAAK,CAAC4C,IAAI;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIf,CAAC;UAEV;UAEA,QAAQhC,KAAK,CAACuC,IAAI;YAChB,KAAK,MAAM;YACX,KAAK,MAAM;cACT,oBACElD,OAAA,CAACT,SAAS;gBAER2D,IAAI,EAAEvC,KAAK,CAACuC,IAAK;gBACjBxB,KAAK,EAAEf,KAAK,CAACe,KAAM;gBACnBd,IAAI,EAAED,KAAK,CAACC,IAAK;gBACjBK,KAAK,EAAEJ,QAAQ,CAACF,KAAK,CAACC,IAAI,CAAE;gBAC5B4C,QAAQ,EAAEzC,YAAa;gBACvB0C,IAAI,EAAC,OAAO;gBACZC,SAAS;gBACTlC,QAAQ,EAAEb,KAAK,CAACa,QAAS;gBACzBmC,eAAe,EAAEhD,KAAK,CAACuC,IAAI,KAAK,MAAM,GAAG;kBAAEU,MAAM,EAAE;gBAAK,CAAC,GAAG,CAAC;cAAE,GAT1DjD,KAAK,CAACC,IAAI;gBAAA4B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAUhB,CAAC;YAGN,KAAK,QAAQ;cACX,oBACE3C,OAAA,CAACT,SAAS;gBAERsE,MAAM;gBACNnC,KAAK,EAAEf,KAAK,CAACe,KAAM;gBACnBd,IAAI,EAAED,KAAK,CAACC,IAAK;gBACjBK,KAAK,EAAEJ,QAAQ,CAACF,KAAK,CAACC,IAAI,CAAE;gBAC5B4C,QAAQ,EAAEzC,YAAa;gBACvB0C,IAAI,EAAC,OAAO;gBACZC,SAAS;gBACTlC,QAAQ,EAAEb,KAAK,CAACa,QAAS;gBAAAa,QAAA,gBAEzBrC,OAAA,CAACH,QAAQ;kBAACoB,KAAK,EAAC,EAAE;kBAAAoB,QAAA,EAAC;gBAAM;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAU,CAAC,EACnChC,KAAK,CAACmD,OAAO,CAACb,GAAG,CAACc,GAAG,iBACpB/D,OAAA,CAACH,QAAQ;kBAAWoB,KAAK,EAAE8C,GAAI;kBAAA1B,QAAA,EAAE0B;gBAAG,GAArBA,GAAG;kBAAAvB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAA6B,CAChD,CAAC;cAAA,GAbGhC,KAAK,CAACC,IAAI;gBAAA4B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAcN,CAAC;YAGhB,KAAK,UAAU;cACb,oBACE3C,OAAA,CAACT,SAAS;gBAERmC,KAAK,EAAEf,KAAK,CAACe,KAAM;gBACnBd,IAAI,EAAED,KAAK,CAACC,IAAK;gBACjBoD,SAAS;gBACTC,IAAI,EAAE,CAAE;gBACRhD,KAAK,EAAEJ,QAAQ,CAACF,KAAK,CAACC,IAAI,CAAE;gBAC5B4C,QAAQ,EAAEzC,YAAa;gBACvB0C,IAAI,EAAC,OAAO;gBACZC,SAAS;gBACTlC,QAAQ,EAAEb,KAAK,CAACa;cAAS,GATpBb,KAAK,CAACC,IAAI;gBAAA4B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAUhB,CAAC;YAGN,KAAK,OAAO;cACV,oBACE3C,OAAA,CAACV,GAAG;gBAAkByC,EAAE,EAAE;kBAAEiB,EAAE,EAAE,CAAC;kBAAEG,KAAK,EAAE;gBAAO,CAAE;gBAAAd,QAAA,gBACjDrC,OAAA,CAACR,UAAU;kBAAA6C,QAAA,EAAE1B,KAAK,CAACe;gBAAK;kBAAAc,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAa,CAAC,eACtC3C,OAAA,CAACL,UAAU;kBACTuE,GAAG;kBACHtD,IAAI,EAAED,KAAK,CAACC,IAAK;kBACjBK,KAAK,EAAEJ,QAAQ,CAACF,KAAK,CAACC,IAAI,CAAE;kBAC5B4C,QAAQ,EAAEzC,YAAa;kBAAAsB,QAAA,EAEtB1B,KAAK,CAACmD,OAAO,CAACb,GAAG,CAACc,GAAG,iBACpB/D,OAAA,CAACJ,gBAAgB;oBAEfqB,KAAK,EAAE8C,GAAI;oBACXI,OAAO,eAAEnE,OAAA,CAACN,KAAK;sBAAC8B,QAAQ,EAAEb,KAAK,CAACa;oBAAS;sBAAAgB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAE;oBAC7CjB,KAAK,EAAEqC;kBAAI,GAHNA,GAAG;oBAAAvB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAIT,CACF;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACQ,CAAC;cAAA,GAhBLhC,KAAK,CAACC,IAAI;gBAAA4B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAiBf,CAAC;YAGV;cACE,OAAO,IAAI;UACf;QACF,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN3C,OAAA,CAACV,GAAG;QAACyC,EAAE,EAAE;UAAEqC,SAAS,EAAE;QAAQ,CAAE;QAAA/B,QAAA,eAC9BrC,OAAA,CAACP,MAAM;UAAC6C,OAAO,EAAC,WAAW;UAACY,IAAI,EAAC,QAAQ;UAAAb,QAAA,EACtCjC,SAAS,GAAG,MAAM,GAAG;QAAQ;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACrC,EAAA,CAxJIL,aAAa;EAAA,QACAH,WAAW;AAAA;AAAAuE,EAAA,GADxBpE,aAAa;AA0JnB,eAAeA,aAAa;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}